/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var w=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var v=Object.getOwnPropertyNames;var F=Object.prototype.hasOwnProperty;var x=(h,u)=>{for(var e in u)w(h,e,{get:u[e],enumerable:!0})},C=(h,u,e,t)=>{if(u&&typeof u=="object"||typeof u=="function")for(let i of v(u))!F.call(h,i)&&i!==e&&w(h,i,{get:()=>u[i],enumerable:!(t=b(u,i))||t.enumerable});return h};var T=h=>C(w({},"__esModule",{value:!0}),h);var I={};x(I,{default:()=>d});module.exports=T(I);var c=require("obsidian"),N={propertyKey:"title",enableForLinking:!0,enableForQuickSwitcher:!0},y=class extends c.EditorSuggest{constructor(e){super(e.app);this.plugin=e}open(){super.open();let e=this.suggestEl;if(e&&!e.querySelector(".prompt-instructions")){let t=e.createDiv({cls:"prompt-instructions"});t.createDiv({cls:"prompt-instruction"}).setText("Type # to link heading"),t.createDiv({cls:"prompt-instruction"}).setText("Type ^ to link blocks"),t.createDiv({cls:"prompt-instruction"}).setText("Type | to change display text")}}onTrigger(e,t,i){if(!this.plugin.settings.enableForLinking)return null;let s=t.getLine(e.line).substring(0,e.ch),n=/\[\[([^#^|\]]*)$/.exec(s);return n?{start:{line:e.line,ch:s.lastIndexOf("[[")},end:e,query:n[1]}:null}getSuggestions(e){let t=e.query.trim(),i=[],s=new Set;return this.app.vault.getMarkdownFiles().forEach(n=>{let r=this.app.metadataCache.getFileCache(n),o=r==null?void 0:r.frontmatter,a=n.basename,l=!1;if(o&&o[this.plugin.settings.propertyKey]!==void 0&&o[this.plugin.settings.propertyKey]!==null){let g=String(o[this.plugin.settings.propertyKey]).trim();g!==""&&(a=g,l=!0)}(!t||this.fuzzyMatch(a,t)||this.fuzzyMatch(n.basename,t))&&(i.push({file:n,display:a,isCustomDisplay:l}),s.add(n.basename.toLowerCase()))}),t&&!s.has(t.toLowerCase())&&i.unshift({display:t,isCustomDisplay:!1,isNewNote:!0}),this.sortSuggestions(i,t)}fuzzyMatch(e,t){let i=0,s=e.toLowerCase(),n=t.toLowerCase();for(let r of n)if(i=s.indexOf(r,i)+1,i===0)return!1;return!0}sortSuggestions(e,t){return e.sort((i,s)=>{var o,a,l,g;let n=this.getMatchScore(i.display,t,(a=(o=i.file)==null?void 0:o.basename)!=null?a:""),r=this.getMatchScore(s.display,t,(g=(l=s.file)==null?void 0:l.basename)!=null?g:"");return i.isNewNote?-1:s.isNewNote?1:r-n||i.display.localeCompare(s.display)})}getMatchScore(e,t,i){let s=0,n=e.toLowerCase(),r=i.toLowerCase(),o=t.toLowerCase();return n.startsWith(o)?s+=10:n.includes(o)&&(s+=5),r.startsWith(o)?s+=8:r.includes(o)&&(s+=4),s}renderSuggestion(e,t){t.empty();let i=t.createDiv({cls:"suggestion-content"});i.createDiv({cls:"suggestion-title",text:e.display}),e.file&&i.createDiv({cls:"suggestion-note",text:e.file.path.replace(".md","")})}async selectSuggestion(e,t){var k;let i=this.app.workspace.getActiveViewOfType(c.MarkdownView);if(!i||!this.context)return;let s=i.editor,{start:n,end:r}=this.context,o=s.getLine(n.line),a=r;o.slice(r.ch,r.ch+2)==="]]"&&(a={line:r.line,ch:r.ch+2});let l=(k=this.app.vault.getConfig("useMarkdownLinks"))!=null?k:!1,g;if(e.isNewNote){let p=await this.app.vault.create(`${e.display}.md`,"");g=l?`[${e.display}](${encodeURI(p.path)})`:`[[${p.basename}]]`,this.app.workspace.activeLeaf&&await this.app.workspace.activeLeaf.openFile(p)}else l?g=`[${e.display}](${encodeURI(e.file.path)})`:g=`[[${e.file.basename}|${e.display}]]`;s.replaceRange(g,{line:n.line,ch:n.ch},a);let m=n.ch+g.length;try{s.setCursor({line:n.line,ch:m})}catch(p){console.error("Error setting cursor:",p),new c.Notice("Error setting cursor position. Please check console for details.")}}},S=class extends c.FuzzySuggestModal{constructor(e,t){super(e);this.plugin=t,this.limit=100,this.setPlaceholder("Type to search notes by title or filename...")}getItems(){return this.app.vault.getMarkdownFiles()}getItemText(e){if("isNewNote"in e)return`Create new note: ${e.newName}`;let t=this.getDisplayName(e);return t+(t!==e.basename?` (${e.basename})`:"")}getDisplayName(e){let t=this.app.metadataCache.getFileCache(e),i=t==null?void 0:t.frontmatter,s=i==null?void 0:i[this.plugin.settings.propertyKey];if(s!=null){let n=String(s).trim();if(n!=="")return n}return e.basename}getSuggestions(e){if(!this.plugin.settings.enableForQuickSwitcher)return[];let t=e.trim(),i=this.getItems(),s=(0,c.prepareFuzzySearch)(t),n=i.map(r=>{let o=this.getItemText(r),a=t?s(o):{score:0,matches:[]};return{item:r,match:a||{score:0,matches:[]}}});try{if(t){n=n.filter(a=>a.match.matches.length>0).sort((a,l)=>l.match.score-a.match.score||this.getItemText(a.item).localeCompare(this.getItemText(l.item))).slice(0,this.limit);let r=t.toLowerCase();if(!i.some(a=>!("isNewNote"in a)&&(this.getDisplayName(a).toLowerCase()===r||a.basename.toLowerCase()===r))){let a={isNewNote:!0,newName:t};n.unshift({item:a,match:{score:1e3,matches:[[0,t.length]]}})}}else n=n.sort((r,o)=>this.getItemText(r.item).localeCompare(this.getItemText(o.item))).slice(0,this.limit);return n}catch(r){return console.error("Error generating suggestions:",r),new c.Notice("Error updating Quick Switcher suggestions. Please check console for details."),[]}}renderSuggestion(e,t){let{item:i,match:s}=e,n=this.inputEl.value.trim(),r=this.getItemText(i),o=t.createDiv({cls:"suggestion-content"});if("isNewNote"in i){o.setText(r);return}if(n&&s.matches.length>0){let a=0,l=document.createDocumentFragment();for(let g of s.matches){l.appendText(r.slice(a,g[0]));let m=document.createElement("span");m.className="suggestion-highlight",m.appendText(r.slice(g[0],g[1])),l.appendChild(m),a=g[1]}l.appendText(r.slice(a)),o.appendChild(l)}else o.setText(r);o.createDiv({cls:"suggestion-note",text:i.path.replace(".md","")})}onChooseItem(e,t){"isNewNote"in e?this.app.vault.create(`${e.newName}.md`,"").then(i=>{this.app.workspace.getLeaf().openFile(i)}).catch(i=>{new c.Notice(`Error creating note: ${i.message}`)}):this.app.workspace.getLeaf().openFile(e)}},d=class extends c.Plugin{async onload(){await this.loadSettings(),this.updateLinkSuggester(),this.updateQuickSwitcher(),this.addSettingTab(new f(this.app,this))}updateLinkSuggester(){let e=this.app.workspace.editorSuggest;e&&(this.suggest&&(e.suggests=e.suggests.filter(t=>t!==this.suggest),this.suggest=void 0),this.settings.enableForLinking&&(this.suggest=new y(this),this.registerEditorSuggest(this.suggest),e.suggests=e.suggests.filter(t=>!t.constructor.name.includes("LinkSuggest")),e.suggests.unshift(this.suggest)))}updateQuickSwitcher(){let e=this.app.commands.commands["switcher:open"];if(!e){console.error("Failed to find switcher:open command"),new c.Notice("Failed to override Quick Switcher. Please ensure the core Quick Switcher is enabled.");return}this.originalSwitcherCallback&&(e.callback=this.originalSwitcherCallback,this.originalSwitcherCallback=void 0),this.settings.enableForQuickSwitcher&&(this.originalSwitcherCallback=e.callback,e.callback=()=>{new S(this.app,this).open()})}onunload(){let e=this.app.workspace.editorSuggest;e&&this.suggest&&(e.suggests=e.suggests.filter(i=>i!==this.suggest));let t=this.app.commands.commands["switcher:open"];t&&this.originalSwitcherCallback&&(t.callback=this.originalSwitcherCallback)}async loadSettings(){this.settings=Object.assign({},N,await this.loadData())}async saveSettings(e){await this.saveData(this.settings),this.updateLinkSuggester(),this.updateQuickSwitcher()}},f=class extends c.PluginSettingTab{constructor(e,t){super(e,t);this.plugin=t}display(){let{containerEl:e}=this;e.empty(),new c.Setting(e).setName("Property key").setDesc("The property to use as the display title.").addText(t=>t.setPlaceholder("title").setValue(this.plugin.settings.propertyKey).onChange(async i=>{this.plugin.settings.propertyKey=i||"title",await this.plugin.saveSettings(this.plugin.settings.enableForQuickSwitcher)})),new c.Setting(e).setName("When linking notes").setDesc("Enable property-based titles in the link suggester.").addToggle(t=>t.setValue(this.plugin.settings.enableForLinking).onChange(async i=>{this.plugin.settings.enableForLinking=i,await this.plugin.saveSettings(this.plugin.settings.enableForQuickSwitcher)})),new c.Setting(e).setName("In quick switcher").setDesc("Enable property-based titles in quick switcher.").addToggle(t=>t.setValue(this.plugin.settings.enableForQuickSwitcher).onChange(async i=>{let s=this.plugin.settings.enableForQuickSwitcher;this.plugin.settings.enableForQuickSwitcher=i,await this.plugin.saveSettings(s)}))}};
