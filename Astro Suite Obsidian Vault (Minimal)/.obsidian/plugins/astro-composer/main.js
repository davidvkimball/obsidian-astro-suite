/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var v=Object.defineProperty;var T=Object.getOwnPropertyDescriptor;var k=Object.getOwnPropertyNames;var A=Object.prototype.hasOwnProperty;var M=(w,m)=>{for(var s in m)v(w,s,{get:m[s],enumerable:!0})},$=(w,m,s,e)=>{if(m&&typeof m=="object"||typeof m=="function")for(let t of k(m))!A.call(w,t)&&t!==s&&v(w,t,{get:()=>m[t],enumerable:!(e=T(m,t))||e.enumerable});return w};var I=w=>$(v({},"__esModule",{value:!0}),w);var Y={};M(Y,{default:()=>P});module.exports=I(Y);var i=require("obsidian"),N={enableUnderscorePrefix:!1,defaultTemplate:`---
title: "{{title}}"
date: {{date}}
---
`,linkBasePath:"/blog/",postsFolder:"posts",automatePostCreation:!0,autoInsertProperties:!0,creationMode:"file",indexFileName:"index",dateFormat:"YYYY-MM-DD",excludedDirectories:"",onlyAutomateInPostsFolder:!1},P=class extends i.Plugin{async onload(){await this.loadSettings(),this.app.workspace.onLayoutReady(()=>{this.registerCreateEvent()}),this.addCommand({id:"standardize-properties",name:"Standardize Properties",icon:"file-check",editorCallback:(s,e)=>{e.file instanceof i.TFile&&this.standardizeProperties(e.file)}}),this.addCommand({id:"convert-wikilinks-astro",name:"Convert internal links for Astro",icon:"link-2",editorCallback:(s,e)=>{e.file instanceof i.TFile&&this.convertWikilinksForAstro(s,e.file)}}),this.addSettingTab(new D(this.app,this))}registerCreateEvent(){if(this.createEvent&&this.app.vault.off("create",this.createEvent),this.settings.automatePostCreation){let s=0,e=500;this.createEvent=async t=>{let o=Date.now();if(!(o-s<e)&&(s=o,t instanceof i.TFile&&t.extension==="md")){let l=t.path,a=this.settings.postsFolder||"",d=await this.app.vault.adapter.stat(t.path),p=(d==null?void 0:d.mtime)&&o-d.mtime<1e3,u=(await this.app.vault.read(t)).trim()==="";if(!p||!u)return;if(this.settings.onlyAutomateInPostsFolder){if(!a||l.startsWith(a+"/")||l===a){let c=this.app.metadataCache.getCache(t.path);(!c||!c.sections||c.sections.length===0)&&new x(this.app,t,this).open()}}else if(!this.settings.excludedDirectories.split("|").map(n=>n.trim()).filter(n=>n.length>0).some(n=>l.startsWith(n+"/")||l===n)){let n=this.app.metadataCache.getCache(t.path);(!n||!n.sections||n.sections.length===0)&&new x(this.app,t,this).open()}}},this.registerEvent(this.app.vault.on("create",this.createEvent))}}toKebabCase(s){return s.toLowerCase().replace(/[^a-z0-9\s-]/g,"").trim().replace(/\s+/g,"-").replace(/-+/g,"-").replace(/^-|-$/g,"")}async createPostFile(s,e){if(!e)return new i.Notice("Title is required to create a post."),null;let t=this.toKebabCase(e),o=this.settings.enableUnderscorePrefix?"_":"",l=this.settings.postsFolder||"";if(l&&(this.app.vault.getAbstractFileByPath(l)instanceof i.TFolder||await this.app.vault.createFolder(l)),this.settings.creationMode==="folder"){let a=`${o}${t}`,d=l?`${l}/${a}`:a;try{this.app.vault.getAbstractFileByPath(d)instanceof i.TFolder||await this.app.vault.createFolder(d)}catch(c){}let p=`${this.settings.indexFileName}.md`,r=`${d}/${p}`;if(this.app.vault.getAbstractFileByPath(r)instanceof i.TFile)return new i.Notice(`File already exists at ${r}.`),null;try{await this.app.vault.rename(s,r);let c=this.app.vault.getAbstractFileByPath(r);return c instanceof i.TFile?(setTimeout(()=>{let n=this.app.workspace.getLeavesOfType("file-explorer")[0];if(n&&n.view){let h=n.view.tree;h&&c instanceof i.TFile&&h.revealFile(c)}},200),await this.app.workspace.getLeaf(!1).openFile(c),this.settings.autoInsertProperties&&await this.addPropertiesToFile(c,e),c):null}catch(c){return new i.Notice(`Failed to create folder structure: ${c.message}.`),null}}else{let a=`${o}${t}.md`,d=l?`${l}/${a}`:a,p=this.app.vault.getAbstractFileByPath(d);if(p instanceof i.TFile&&p!==s)return new i.Notice(`File with name "${a}" already exists.`),null;try{await this.app.vault.rename(s,d);let r=this.app.vault.getAbstractFileByPath(d);return r instanceof i.TFile?(await this.app.workspace.getLeaf(!1).openFile(r),this.settings.autoInsertProperties&&await this.addPropertiesToFile(r,e),r):null}catch(r){return new i.Notice(`Failed to rename file: ${r.message}.`),null}}}async addPropertiesToFile(s,e,t){let o=new Date,l=window.moment(o).format(this.settings.dateFormat),a=this.settings.defaultTemplate;a=a.replace(/\{\{title\}\}/g,e),a=a.replace(/\{\{date\}\}/g,l),await this.app.vault.modify(s,a)}async standardizeProperties(s){if(!(s instanceof i.TFile)){new i.Notice("No active file.");return}await new Promise(n=>setTimeout(n,100));let e=await this.app.vault.read(s),t=s.basename.replace(/^_/,""),o=0,l={};if(e.startsWith("---")){o=e.indexOf(`
---`,3),o===-1?o=e.length:o+=4;let n=e.slice(4,o-4).trim();try{let h=null;n.split(`
`).forEach(b=>{let F=b.match(/^(\w+):\s*(.+)?$/);if(F){let[,g,C]=F;h=g,g==="tags"?l[g]=[]:C&&(l[g]=[C.trim()])}else if(h==="tags"&&b.trim().startsWith("- ")){let g=b.trim().replace(/^-\s*/,"");g&&l.tags.push(g)}})}catch(h){new i.Notice("Falling back to template due to parsing error.")}}let a=this.settings.defaultTemplate.split(`
`),d=[],p={},r=!1;for(let n=0;n<a.length;n++){let h=a[n].trim();if(h==="---"){if(r=!r,!r)break;continue}if(r){let b=h.match(/^(\w+):\s*(.+)?$/);if(b){let[,F,g]=b;if(d.push(F),F==="tags")if(g&&g.startsWith("[")){let C=g.replace(/[\[\]]/g,"").split(",").map(y=>y.trim()).filter(y=>y);p[F]=C.length?C:[]}else{p[F]=[];for(let C=n+1;C<a.length;C++){let y=a[C].trim();if(y.startsWith("- ")){let E=y.replace(/^-\s*/,"").trim();E&&p[F].push(E)}else if(y==="---")break}}else g&&(p[F]=[g.replace(/\{\{title\}\}/g,t).replace(/\{\{date\}\}/g,window.moment(new Date).format(this.settings.dateFormat))])}}}let u={...l};for(let n of d)if(!(n in l))u[n]=p[n]||[];else if(n==="tags"&&p[n]&&p[n].length>0){let h=[...l[n],...p[n].filter(b=>!l[n].includes(b))];u[n]=h}let c=`---
`;for(let n in u)u[n].length>0&&(n==="tags"?(c+=`tags:
`,u[n].forEach(h=>{c+=`  - ${h}
`})):c+=`${n}: ${u[n][0]}
`);c+="---";let f=e.slice(o);c+=f,await this.app.vault.modify(s,c),new i.Notice("Properties standardized using template.")}async convertWikilinksForAstro(s,e){if(!(e instanceof i.TFile)){new i.Notice("No active file.");return}let o=s.getValue(),l=/\.(png|jpg|jpeg|gif|svg)$/i;o=o.replace(/\[\[([^\]|]+)(\|([^\]]+))?\]\]/g,(a,d,p,r)=>{if(l.test(d))return a;let u=r||d.replace(/\.md$/,""),c=this.toKebabCase(d.replace(/\.md$/,"")),f=this.settings.linkBasePath;return f.startsWith("/")||(f="/"+f),f.endsWith("/")||(f=f+"/"),`[${u}](${f}${c}/)`}),o=o.replace(/\[([^\]]+)\]\(([^)]+\.md)\)/g,(a,d,p)=>{if(l.test(p)||p.match(/^https?:\/\//))return a;let r=this.toKebabCase(p.replace(/\.md$/,"")),u=this.settings.linkBasePath;return u.startsWith("/")||(u="/"+u),u.endsWith("/")||(u=u+"/"),`[${d}](${u}${r}/)`}),o=o.replace(/!\[(.*?)\]\(([^)]+)\)/g,a=>a),o=o.replace(/\{\{([^}]+)\}\}/g,(a,d)=>{if(l.test(d))return a;let p=this.toKebabCase(d.replace(".md","")),r=this.settings.linkBasePath;return r.startsWith("/")||(r="/"+r),r.endsWith("/")||(r=r+"/"),`[Embedded: ${d}](${r}${p}/)`}),s.setValue(o),new i.Notice("All internal links converted for Astro.")}async loadSettings(){this.settings=Object.assign({},N,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}},x=class extends i.Modal{constructor(s,e,t){super(s);this.file=e,this.plugin=t}onOpen(){let{contentEl:s}=this;s.empty(),s.createEl("h2",{text:"New Blog Post"}),s.createEl("p",{text:"Enter a title for your blog post:"}),this.titleInput=s.createEl("input",{type:"text",placeholder:"My Awesome Blog Post",cls:"astro-composer-title-input"}),this.titleInput.focus();let e=s.createDiv({cls:"astro-composer-button-container"}),t=e.createEl("button",{text:"Cancel",cls:"astro-composer-cancel-button"});t.onclick=()=>this.close();let o=e.createEl("button",{text:"Create",cls:["astro-composer-create-button","mod-cta"]});o.onclick=()=>this.createPost(),this.titleInput.addEventListener("keypress",l=>{l.key==="Enter"&&this.createPost()})}async createPost(){let s=this.titleInput.value.trim();if(!s){new i.Notice("Please enter a title.");return}try{let e=await this.plugin.createPostFile(this.file,s);e&&this.plugin.settings.autoInsertProperties&&await this.plugin.addPropertiesToFile(e,s)}catch(e){new i.Notice(`Error creating post: ${e.message}.`)}this.close()}onClose(){let{contentEl:s}=this;s.empty()}},D=class extends i.PluginSettingTab{constructor(s,e){super(s,e);this.autoRenameContainer=null;this.postsFolderContainer=null;this.onlyAutomateContainer=null;this.creationModeContainer=null;this.indexFileContainer=null;this.excludedDirsContainer=null;this.underscorePrefixContainer=null;this.autoInsertContainer=null;this.plugin=e}display(){let{containerEl:s}=this;s.empty(),new i.Setting(s).setName("Automate post creation").setDesc("Automatically show title dialog for new .md files, rename them based on the title, and insert properties if enabled.").addToggle(e=>e.setValue(this.plugin.settings.automatePostCreation).onChange(async t=>{this.plugin.settings.automatePostCreation=t,this.plugin.settings.autoInsertProperties=t,await this.plugin.saveSettings(),this.plugin.registerCreateEvent(),this.updateConditionalFields()})),this.autoRenameContainer=s.createDiv({cls:"auto-rename-fields"}),this.autoRenameContainer.style.display=this.plugin.settings.automatePostCreation?"block":"none",this.autoInsertContainer=this.autoRenameContainer.createDiv(),new i.Setting(this.autoInsertContainer).setName("Auto-insert properties").setDesc("Automatically insert the properties template when creating new files (requires 'Automate post creation' to be enabled).").addToggle(e=>e.setValue(this.plugin.settings.autoInsertProperties).setDisabled(!this.plugin.settings.automatePostCreation).onChange(async t=>{this.plugin.settings.autoInsertProperties=t,await this.plugin.saveSettings()})),this.postsFolderContainer=this.autoRenameContainer.createDiv(),new i.Setting(this.postsFolderContainer).setName("Posts folder").setDesc("Folder name for blog posts (leave blank to use the vault folder). You can specify the default location for new notes in Obsidian's 'Files and links' settings.").addText(e=>e.setPlaceholder("Enter folder path").setValue(this.plugin.settings.postsFolder).onChange(async t=>{this.plugin.settings.postsFolder=t,await this.plugin.saveSettings()})),this.onlyAutomateContainer=this.autoRenameContainer.createDiv(),new i.Setting(this.onlyAutomateContainer).setName("Only automate in this folder").setDesc("When enabled, automation will only trigger for new .md files within the specified Posts folder and subfolders.").addToggle(e=>e.setValue(this.plugin.settings.onlyAutomateInPostsFolder).onChange(async t=>{this.plugin.settings.onlyAutomateInPostsFolder=t,await this.plugin.saveSettings(),this.updateExcludedDirsField()})),this.excludedDirsContainer=this.autoRenameContainer.createDiv({cls:"excluded-dirs-field"}),this.excludedDirsContainer.style.display=this.plugin.settings.onlyAutomateInPostsFolder?"none":"block",new i.Setting(this.excludedDirsContainer).setName("Excluded directories").setDesc("Directories to exclude from automatic post creation (e.g., pages|posts/example). Excluded directories and their child folders will be ignored. Use '|' to separate multiple directories.").addText(e=>e.setPlaceholder("pages|posts/example").setValue(this.plugin.settings.excludedDirectories).onChange(async t=>{this.plugin.settings.excludedDirectories=t,await this.plugin.saveSettings()})),this.creationModeContainer=this.autoRenameContainer.createDiv(),new i.Setting(this.creationModeContainer).setName("Creation mode").setDesc("How to create new posts: file-based or folder-based with index.md.").addDropdown(e=>e.addOption("file","File-based (post-title.md)").addOption("folder","Folder-based (post-title/index.md)").setValue(this.plugin.settings.creationMode).onChange(async t=>{this.plugin.settings.creationMode=t,await this.plugin.saveSettings(),this.updateIndexFileField()})),this.indexFileContainer=this.autoRenameContainer.createDiv({cls:"index-file-field"}),this.indexFileContainer.style.display=this.plugin.settings.creationMode==="folder"?"block":"none",new i.Setting(this.indexFileContainer).setName("Index file name").setDesc("Name for the main file in folder-based mode (without .md extension).").addText(e=>e.setPlaceholder("index").setValue(this.plugin.settings.indexFileName).onChange(async t=>{this.plugin.settings.indexFileName=t||"index",await this.plugin.saveSettings()})),this.underscorePrefixContainer=this.autoRenameContainer.createDiv(),new i.Setting(this.underscorePrefixContainer).setName("Use underscore prefix for drafts").setDesc("Add an underscore prefix (_post-title) to new notes by default when enabled. This hides them from Astro, which can be helpful for post drafts. Disable to skip prefixing.").addToggle(e=>e.setValue(this.plugin.settings.enableUnderscorePrefix).onChange(async t=>{this.plugin.settings.enableUnderscorePrefix=t,await this.plugin.saveSettings()})),new i.Setting(s).setName("Link base path").setDesc("Base path for converted links (e.g., /blog/, leave blank for root domain).").addText(e=>e.setPlaceholder("/blog/").setValue(this.plugin.settings.linkBasePath).onChange(async t=>{this.plugin.settings.linkBasePath=t,await this.plugin.saveSettings()})),new i.Setting(s).setName("Date format").setDesc("Format for the date in properties (e.g., YYYY-MM-DD, MMMM D, YYYY, YYYY-MM-DD HH:mm).").addText(e=>e.setPlaceholder("YYYY-MM-DD").setValue(this.plugin.settings.dateFormat).onChange(async t=>{this.plugin.settings.dateFormat=t||"YYYY-MM-DD",await this.plugin.saveSettings()})),new i.Setting(s).setName("Properties template").addTextArea(e=>{let t=this.plugin;return e.setPlaceholder(`---
title: "{{title}}"
date: {{date}}
---
`).setValue(t.settings.defaultTemplate).onChange(async o=>{t.settings.defaultTemplate=o,await t.saveSettings()}),e.inputEl.classList.add("astro-composer-template-textarea"),e}).then(e=>{e.descEl.empty();let t=e.descEl.createEl("div");t.innerHTML="Used for new posts and when standardizing properties.<br />Variables include {{title}} and {{date}}.<br />Do not wrap {{date}} in quotes as it represents a datetime value, not a string.<br />The 'standardize properties' command ignores anything below the second '---' line."}),this.updateConditionalFields(),this.updateIndexFileField(),this.updateExcludedDirsField()}updateConditionalFields(){this.autoRenameContainer&&(this.autoRenameContainer.style.display=this.plugin.settings.automatePostCreation?"block":"none")}updateIndexFileField(){this.indexFileContainer&&(this.indexFileContainer.style.display=this.plugin.settings.creationMode==="folder"?"block":"none")}updateExcludedDirsField(){this.excludedDirsContainer&&(this.excludedDirsContainer.style.display=this.plugin.settings.onlyAutomateInPostsFolder?"none":"block")}};
