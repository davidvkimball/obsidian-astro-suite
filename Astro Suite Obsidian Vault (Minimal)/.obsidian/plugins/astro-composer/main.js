/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => AstroComposerPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian7 = require("obsidian");

// src/types.ts
var KNOWN_ARRAY_KEYS = ["tags", "aliases", "cssclasses"];
var CONSTANTS = {
  DEBOUNCE_MS: 500,
  STAT_MTIME_THRESHOLD: 1e3,
  EDITOR_STABILIZE_DELAY: 100,
  FILE_EXPLORER_REVEAL_DELAY: 200
};

// src/settings.ts
var DEFAULT_SETTINGS = {
  enableUnderscorePrefix: false,
  defaultTemplate: '---\ntitle: "{{title}}"\ndate: {{date}}\ntags: []\n---\n',
  postsFolder: "posts",
  postsLinkBasePath: "blog/",
  automatePostCreation: true,
  autoInsertProperties: true,
  creationMode: "file",
  indexFileName: "",
  dateFormat: "YYYY-MM-DD",
  excludedDirectories: "",
  onlyAutomateInPostsFolder: false,
  enablePages: false,
  pagesFolder: "pages",
  pagesLinkBasePath: "",
  pagesCreationMode: "file",
  pagesIndexFileName: "",
  pageTemplate: '---\ntitle: "{{title}}"\ndescription: ""\n---\n',
  enableCopyHeadingLink: true,
  copyHeadingLinkFormat: "obsidian",
  addTrailingSlashToLinks: false,
  customContentTypes: []
};

// src/commands/index.ts
var import_obsidian5 = require("obsidian");

// src/utils/file-operations.ts
var import_obsidian = require("obsidian");
var FileOperations = class {
  constructor(app, settings, plugin) {
    this.app = app;
    this.settings = settings;
    this.plugin = plugin;
  }
  toKebabCase(str) {
    return str.toLowerCase().replace(/[^a-z0-9\s-]/g, "").trim().replace(/\s+/g, "-").replace(/-+/g, "-").replace(/^-|-$/g, "");
  }
  generateFilename(title) {
    const kebabTitle = this.toKebabCase(title);
    const prefix = this.settings.enableUnderscorePrefix ? "_" : "";
    return `${prefix}${kebabTitle}`;
  }
  determineType(file) {
    const filePath = file.path;
    for (const customType of this.settings.customContentTypes) {
      if (customType.enabled && customType.folder && (filePath.startsWith(customType.folder + "/") || filePath === customType.folder)) {
        return customType.id;
      }
    }
    const pagesFolder = this.settings.pagesFolder || "";
    let isPage = false;
    if (this.settings.enablePages) {
      if (pagesFolder) {
        isPage = filePath.startsWith(pagesFolder + "/") || filePath === pagesFolder;
      } else {
        isPage = !filePath.includes("/");
      }
    }
    if (isPage)
      return "page";
    const postsFolder = this.settings.postsFolder || "";
    let isPost = false;
    if (this.settings.automatePostCreation) {
      if (postsFolder) {
        isPost = filePath.startsWith(postsFolder + "/") || filePath === postsFolder;
      } else {
        isPost = !filePath.includes("/");
      }
    }
    if (isPost)
      return "post";
    return "note";
  }
  getCustomContentType(typeId) {
    return this.settings.customContentTypes.find((ct) => ct.id === typeId) || null;
  }
  isCustomContentType(type) {
    return type !== "post" && type !== "page";
  }
  getTitleKey(type) {
    if (type === "note")
      return "title";
    let template;
    if (this.isCustomContentType(type)) {
      const customType = this.getCustomContentType(type);
      if (!customType)
        return "title";
      template = customType.template;
    } else {
      template = type === "post" ? this.settings.defaultTemplate : this.settings.pageTemplate;
    }
    const lines = template.split("\n");
    let inProperties = false;
    for (const line of lines) {
      const trimmed = line.trim();
      if (trimmed === "---") {
        inProperties = !inProperties;
        continue;
      }
      if (inProperties) {
        const match = trimmed.match(/^(\w+):\s*(.+)$/);
        if (match) {
          const key = match[1];
          const value = match[2];
          if (value.includes("{{title}}")) {
            return key;
          }
        }
      }
    }
    return "title";
  }
  async createFile(options) {
    var _a, _b;
    const { file, title, type } = options;
    if (!title) {
      new import_obsidian.Notice(`Title is required to create a ${type}.`);
      return null;
    }
    const kebabTitle = this.toKebabCase(title);
    const prefix = this.settings.enableUnderscorePrefix ? "_" : "";
    let targetFolder = "";
    if (type === "note") {
      targetFolder = "";
    } else if (this.isCustomContentType(type)) {
      const customType = this.getCustomContentType(type);
      const originalDir = ((_a = file.parent) == null ? void 0 : _a.path) || "";
      if (originalDir === "" || originalDir === "/") {
        targetFolder = customType ? customType.folder : "";
      } else {
        targetFolder = originalDir;
      }
    } else {
      const postsFolder = this.settings.postsFolder || "";
      const pagesFolder = this.settings.pagesFolder || "";
      const originalDir = ((_b = file.parent) == null ? void 0 : _b.path) || "";
      if (originalDir === "" || originalDir === "/") {
        targetFolder = "";
      } else {
        targetFolder = originalDir;
      }
    }
    if (targetFolder) {
      const folder = this.app.vault.getAbstractFileByPath(targetFolder);
      if (!(folder instanceof import_obsidian.TFolder)) {
        await this.app.vault.createFolder(targetFolder);
      }
    }
    if (this.settings.creationMode === "folder") {
      return this.createFolderStructure(file, kebabTitle, prefix, targetFolder, type);
    } else {
      return this.createFileStructure(file, kebabTitle, prefix, targetFolder);
    }
  }
  async createFolderStructure(file, kebabTitle, prefix, targetFolder, type) {
    const folderName = `${prefix}${kebabTitle}`;
    let folderPath;
    if (targetFolder) {
      folderPath = `${targetFolder}/${folderName}`;
    } else {
      const currentDir = file.parent ? file.parent.path : "";
      if (currentDir && currentDir !== "/") {
        folderPath = `${currentDir}/${folderName}`;
      } else {
        folderPath = folderName;
      }
    }
    try {
      const folder = this.app.vault.getAbstractFileByPath(folderPath);
      if (!(folder instanceof import_obsidian.TFolder)) {
        await this.app.vault.createFolder(folderPath);
      }
    } catch (error) {
    }
    const indexFileName = this.settings.indexFileName || "index";
    const fileName = `${indexFileName}.md`;
    const newPath = `${folderPath}/${fileName}`;
    const existingFile = this.app.vault.getAbstractFileByPath(newPath);
    if (existingFile instanceof import_obsidian.TFile) {
      new import_obsidian.Notice(`File already exists at ${newPath}.`);
      return null;
    }
    try {
      await this.app.vault.rename(file, newPath);
      const newFile = this.app.vault.getAbstractFileByPath(newPath);
      if (!(newFile instanceof import_obsidian.TFile)) {
        return null;
      }
      setTimeout(() => {
        const fileExplorer = this.app.workspace.getLeavesOfType("file-explorer")[0];
        if (fileExplorer && fileExplorer.view) {
          const fileTree = fileExplorer.view.tree;
          if (fileTree && newFile instanceof import_obsidian.TFile && typeof fileTree.revealFile === "function") {
            fileTree.revealFile(newFile);
          }
        }
      }, 200);
      const leaf = this.app.workspace.getLeaf(false);
      await leaf.openFile(newFile);
      return newFile;
    } catch (error) {
      new import_obsidian.Notice(`Failed to create folder structure: ${error.message}.`);
      return null;
    }
  }
  async createFileStructure(file, kebabTitle, prefix, targetFolder) {
    const newName = `${prefix}${kebabTitle}.md`;
    let newPath;
    if (targetFolder) {
      newPath = `${targetFolder}/${newName}`;
    } else {
      const currentDir = file.parent ? file.parent.path : "";
      if (currentDir && currentDir !== "/") {
        newPath = `${currentDir}/${newName}`;
      } else {
        newPath = newName;
      }
    }
    const existingFile = this.app.vault.getAbstractFileByPath(newPath);
    if (existingFile instanceof import_obsidian.TFile && existingFile !== file) {
      new import_obsidian.Notice(`File with name "${newName}" already exists.`);
      return null;
    }
    try {
      await this.app.vault.rename(file, newPath);
      const newFile = this.app.vault.getAbstractFileByPath(newPath);
      if (!(newFile instanceof import_obsidian.TFile)) {
        return null;
      }
      if (this.plugin && "pluginCreatedFiles" in this.plugin) {
        this.plugin.pluginCreatedFiles.add(newPath);
      }
      const leaf = this.app.workspace.getLeaf(false);
      await leaf.openFile(newFile);
      return newFile;
    } catch (error) {
      new import_obsidian.Notice(`Failed to rename file: ${error.message}.`);
      return null;
    }
  }
  async renameFile(options) {
    const { file, title, type } = options;
    if (!title) {
      new import_obsidian.Notice(`Title is required to rename the content.`);
      return null;
    }
    const kebabTitle = this.toKebabCase(title);
    const prefix = "";
    if (this.settings.creationMode === "folder") {
      return this.renameFolderStructure(file, kebabTitle, prefix, type);
    } else {
      return this.renameFileStructure(file, kebabTitle, prefix);
    }
  }
  async renameFolderStructure(file, kebabTitle, prefix, type) {
    const indexFileName = this.settings.indexFileName || "index";
    const isIndex = file.basename === indexFileName;
    if (isIndex) {
      if (!file.parent) {
        new import_obsidian.Notice("Cannot rename: File has no parent folder.");
        return null;
      }
      prefix = file.parent.name.startsWith("_") ? "_" : "";
      const newFolderName = `${prefix}${kebabTitle}`;
      const parentFolder = file.parent.parent;
      if (!parentFolder) {
        new import_obsidian.Notice("Cannot rename: Parent folder has no parent.");
        return null;
      }
      const newFolderPath = `${parentFolder.path}/${newFolderName}`;
      const existingFolder = this.app.vault.getAbstractFileByPath(newFolderPath);
      if (existingFolder instanceof import_obsidian.TFolder) {
        new import_obsidian.Notice(`Folder already exists at ${newFolderPath}.`);
        return null;
      }
      await this.app.vault.rename(file.parent, newFolderPath);
      const newFilePath = `${newFolderPath}/${file.name}`;
      const newFile = this.app.vault.getAbstractFileByPath(newFilePath);
      if (!(newFile instanceof import_obsidian.TFile)) {
        new import_obsidian.Notice("Failed to locate renamed file.");
        return null;
      }
      return newFile;
    } else {
      if (!file.parent) {
        new import_obsidian.Notice("Cannot rename: File has no parent folder.");
        return null;
      }
      prefix = file.basename.startsWith("_") ? "_" : "";
      const newName = `${prefix}${kebabTitle}.md`;
      const newPath = `${file.parent.path}/${newName}`;
      const existingFile = this.app.vault.getAbstractFileByPath(newPath);
      if (existingFile instanceof import_obsidian.TFile && existingFile !== file) {
        new import_obsidian.Notice(`File already exists at ${newPath}.`);
        return null;
      }
      await this.app.vault.rename(file, newPath);
      const newFile = this.app.vault.getAbstractFileByPath(newPath);
      if (!(newFile instanceof import_obsidian.TFile)) {
        new import_obsidian.Notice("Failed to locate renamed file.");
        return null;
      }
      return newFile;
    }
  }
  async renameFileStructure(file, kebabTitle, prefix) {
    if (!file.parent) {
      new import_obsidian.Notice("Cannot rename: File has no parent folder.");
      return null;
    }
    const isIndex = this.settings.indexFileName && this.settings.indexFileName.trim() !== "" && file.basename === this.settings.indexFileName;
    if (isIndex) {
      prefix = file.parent.name.startsWith("_") ? "_" : "";
      const newFolderName = `${prefix}${kebabTitle}`;
      const parentFolder = file.parent.parent;
      if (!parentFolder) {
        new import_obsidian.Notice("Cannot rename: Parent folder has no parent.");
        return null;
      }
      const newFolderPath = `${parentFolder.path}/${newFolderName}`;
      const existingFolder = this.app.vault.getAbstractFileByPath(newFolderPath);
      if (existingFolder instanceof import_obsidian.TFolder) {
        new import_obsidian.Notice(`Folder already exists at ${newFolderPath}.`);
        return null;
      }
      await this.app.vault.rename(file.parent, newFolderPath);
      const newFilePath = `${newFolderPath}/${file.name}`;
      const newFile2 = this.app.vault.getAbstractFileByPath(newFilePath);
      if (!(newFile2 instanceof import_obsidian.TFile)) {
        new import_obsidian.Notice("Failed to locate renamed file.");
        return null;
      }
      return newFile2;
    }
    prefix = file.basename.startsWith("_") ? "_" : "";
    const newName = `${prefix}${kebabTitle}.md`;
    const newPath = `${file.parent.path}/${newName}`;
    const existingFile = this.app.vault.getAbstractFileByPath(newPath);
    if (existingFile instanceof import_obsidian.TFile && existingFile !== file) {
      new import_obsidian.Notice(`File already exists at ${newPath}.`);
      return null;
    }
    await this.app.vault.rename(file, newPath);
    const newFile = this.app.vault.getAbstractFileByPath(newPath);
    if (!(newFile instanceof import_obsidian.TFile)) {
      new import_obsidian.Notice("Failed to locate renamed file.");
      return null;
    }
    return newFile;
  }
};

// src/utils/template-parsing.ts
var import_obsidian2 = require("obsidian");
var TemplateParser = class {
  constructor(app, settings) {
    this.app = app;
    this.settings = settings;
  }
  async parseFrontmatter(content) {
    let propertiesEnd = 0;
    let propertiesText = "";
    const existingProperties = {};
    if (content.startsWith("---")) {
      propertiesEnd = content.indexOf("\n---", 3);
      if (propertiesEnd === -1) {
        propertiesEnd = content.length;
      } else {
        propertiesEnd += 4;
      }
      propertiesText = content.slice(4, propertiesEnd - 4).trim();
      try {
        let currentKey = null;
        const arrayKeys = /* @__PURE__ */ new Set();
        propertiesText.split("\n").forEach((line) => {
          const trimmedLine = line.trim();
          const match = trimmedLine.match(/^([a-zA-Z_][a-zA-Z0-9_-]*):\s*(.*)$/);
          if (match) {
            const [, key, value] = match;
            currentKey = key;
            const isKnownArrayKey = KNOWN_ARRAY_KEYS.includes(key);
            const isEmptyArray = !value || value.trim() === "" || value.trim() === "[]";
            const isArrayProperty = isKnownArrayKey || isEmptyArray;
            if (isArrayProperty) {
              existingProperties[key] = [];
              arrayKeys.add(key);
            } else {
              existingProperties[key] = [value ? value.trim() : ""];
            }
          } else if (currentKey && trimmedLine.startsWith("- ")) {
            const isArrayProperty = arrayKeys.has(currentKey);
            if (isArrayProperty) {
              const item = trimmedLine.replace(/^-\s*/, "");
              if (item)
                existingProperties[currentKey].push(item);
            }
          } else if (trimmedLine && !trimmedLine.startsWith("- ") && !trimmedLine.startsWith("#")) {
            const keyMatch = trimmedLine.match(/^([^:]+):\s*(.*)$/);
            if (keyMatch) {
              const [, key, value] = keyMatch;
              if (!existingProperties[key]) {
                existingProperties[key] = [value ? value.trim() : ""];
              }
            }
          }
        });
        KNOWN_ARRAY_KEYS.forEach((key) => {
          if (propertiesText.includes(key + ":") && !existingProperties[key]) {
            existingProperties[key] = [];
          }
        });
      } catch (error) {
        new import_obsidian2.Notice("Falling back to template due to parsing error.");
      }
    }
    const bodyContent = content.slice(propertiesEnd);
    return {
      properties: existingProperties,
      propertiesText,
      propertiesEnd,
      bodyContent
    };
  }
  parseTemplate(templateString, title) {
    const templateLines = templateString.split("\n");
    const templateProps = [];
    const templateValues = {};
    let inProperties = false;
    for (let i = 0; i < templateLines.length; i++) {
      const line = templateLines[i].trim();
      if (line === "---") {
        inProperties = !inProperties;
        if (!inProperties) {
          break;
        }
        continue;
      }
      if (inProperties) {
        const match = line.match(/^(\w+):\s*(.*)$/);
        if (match) {
          const [, key, value] = match;
          templateProps.push(key);
          const isKnownArrayKey = KNOWN_ARRAY_KEYS.includes(key);
          const isEmptyArray = !value || value.trim() === "" || value.trim() === "[]";
          const isArrayProperty = isKnownArrayKey || isEmptyArray;
          if (isArrayProperty) {
            if (value && value.startsWith("[")) {
              const items = value.replace(/[[\]]/g, "").split(",").map((t) => t.trim()).filter((t) => t);
              templateValues[key] = items;
            } else {
              templateValues[key] = [];
              for (let j = i + 1; j < templateLines.length; j++) {
                const nextLine = templateLines[j].trim();
                if (nextLine.startsWith("- ")) {
                  const item = nextLine.replace(/^-\s*/, "").trim();
                  if (item)
                    templateValues[key].push(item);
                } else if (nextLine === "---" || nextLine && !nextLine.startsWith("- ") && nextLine.includes(":")) {
                  break;
                }
              }
            }
          } else {
            const stringValue = (value || "").replace(/\{\{title\}\}/g, title).replace(/\{\{date\}\}/g, window.moment(new Date()).format(this.settings.dateFormat));
            templateValues[key] = stringValue;
          }
        }
      }
    }
    return { templateProps, templateValues };
  }
  buildFrontmatterContent(finalProps, arrayKeys) {
    let newContent = "---\n";
    for (const key in finalProps) {
      const isArrayProperty = KNOWN_ARRAY_KEYS.includes(key) || arrayKeys && arrayKeys.has(key);
      if (isArrayProperty) {
        newContent += `${key}:
`;
        if (finalProps[key].length > 0) {
          finalProps[key].forEach((item) => {
            newContent += `  - ${item}
`;
          });
        }
      } else {
        newContent += `${key}: ${finalProps[key][0] || ""}
`;
      }
    }
    newContent += "---";
    return newContent;
  }
  async updateTitleInFrontmatter(file, newTitle, type) {
    const titleKey = this.getTitleKey(type);
    const content = await this.app.vault.read(file);
    let propertiesEnd = 0;
    let propertiesText = "";
    if (content.startsWith("---")) {
      propertiesEnd = content.indexOf("\n---", 3);
      if (propertiesEnd === -1) {
        propertiesEnd = content.length;
      } else {
        propertiesEnd += 4;
      }
      propertiesText = content.slice(4, propertiesEnd - 4).trim();
    }
    const propOrder = [];
    const existing = {};
    let currentKey = null;
    let titleKeyPosition = -1;
    const arrayKeys = /* @__PURE__ */ new Set();
    propertiesText.split("\n").forEach((line, index) => {
      const trimmedLine = line.trim();
      const match = trimmedLine.match(/^([a-zA-Z_][a-zA-Z0-9_-]*):\s*(.*)$/);
      if (match) {
        const [, key, value] = match;
        propOrder.push(key);
        currentKey = key;
        if (key === titleKey) {
          titleKeyPosition = index;
        }
        const isKnownArrayKey = KNOWN_ARRAY_KEYS.includes(key);
        const isEmptyArray = !value || value.trim() === "" || value.trim() === "[]";
        const isArrayProperty = isKnownArrayKey || isEmptyArray;
        if (isArrayProperty) {
          existing[key] = [];
          arrayKeys.add(key);
        } else {
          existing[key] = value ? value.trim() : "";
        }
      } else if (currentKey && arrayKeys.has(currentKey) && trimmedLine.startsWith("- ")) {
        const item = trimmedLine.replace(/^-\s*/, "");
        if (item)
          existing[currentKey].push(item);
      } else if (trimmedLine && !trimmedLine.startsWith("- ") && !trimmedLine.startsWith("#")) {
        const keyMatch = trimmedLine.match(/^([^:]+):\s*(.*)$/);
        if (keyMatch) {
          const [, key, value] = keyMatch;
          if (!propOrder.includes(key)) {
            propOrder.push(key);
            existing[key] = value ? value.trim() : "";
          }
        }
      }
    });
    const escapedTitle = newTitle.replace(/"/g, '\\"');
    const titleVal = newTitle.includes(" ") || newTitle.includes('"') ? `"${escapedTitle}"` : newTitle;
    existing[titleKey] = titleVal;
    if (titleKeyPosition === -1) {
      propOrder.push(titleKey);
    }
    let newContent = "---\n";
    for (const key of propOrder) {
      const val = existing[key];
      if (Array.isArray(val)) {
        newContent += `${key}:
`;
        if (val.length > 0) {
          val.forEach((item) => {
            newContent += `  - ${item}
`;
          });
        }
      } else {
        newContent += `${key}: ${val || ""}
`;
      }
    }
    newContent += "---";
    const bodyContent = content.slice(propertiesEnd);
    newContent += bodyContent;
    await this.app.vault.modify(file, newContent);
  }
  getTitleKey(type) {
    let template;
    if (this.isCustomContentType(type)) {
      const customType = this.getCustomContentType(type);
      if (!customType)
        return "title";
      template = customType.template;
    } else {
      template = type === "post" ? this.settings.defaultTemplate : this.settings.pageTemplate;
    }
    const lines = template.split("\n");
    let inProperties = false;
    for (const line of lines) {
      const trimmed = line.trim();
      if (trimmed === "---") {
        inProperties = !inProperties;
        continue;
      }
      if (inProperties) {
        const match = trimmed.match(/^(\w+):\s*(.+)$/);
        if (match) {
          const key = match[1];
          const value = match[2];
          if (value.includes("{{title}}")) {
            return key;
          }
        }
      }
    }
    return "title";
  }
  isCustomContentType(type) {
    return type !== "post" && type !== "page";
  }
  getCustomContentType(typeId) {
    return this.settings.customContentTypes.find((ct) => ct.id === typeId) || null;
  }
};

// src/utils/link-conversion.ts
var import_obsidian3 = require("obsidian");
var LinkConverter = class {
  constructor(settings) {
    this.settings = settings;
  }
  toKebabCase(str) {
    return str.toLowerCase().replace(/[^a-z0-9\s-]/g, "").trim().replace(/\s+/g, "-").replace(/-+/g, "-").replace(/^-|-$/g, "");
  }
  getAstroUrlFromInternalLink(link) {
    const hashIndex = link.indexOf("#");
    let path = hashIndex >= 0 ? link.slice(0, hashIndex) : link;
    const anchor = hashIndex >= 0 ? link.slice(hashIndex) : "";
    path = decodeURIComponent(path);
    path = path.replace(/\.md$/, "");
    let basePath = "";
    let contentFolder = "";
    let creationMode = "file";
    let indexFileName = "";
    let foundCustomType = false;
    for (const customType of this.settings.customContentTypes) {
      if (customType.enabled && customType.folder && path.startsWith(customType.folder + "/")) {
        contentFolder = customType.folder;
        basePath = customType.linkBasePath || "";
        creationMode = customType.creationMode;
        indexFileName = customType.indexFileName;
        foundCustomType = true;
        break;
      }
    }
    if (!foundCustomType && this.settings.enablePages && this.settings.pagesFolder && path.startsWith(this.settings.pagesFolder + "/")) {
      contentFolder = this.settings.pagesFolder;
      basePath = this.settings.pagesLinkBasePath;
      creationMode = this.settings.pagesCreationMode || "file";
      indexFileName = this.settings.pagesIndexFileName || "";
    } else if (!foundCustomType && this.settings.postsFolder && path.startsWith(this.settings.postsFolder + "/")) {
      contentFolder = this.settings.postsFolder;
      basePath = this.settings.postsLinkBasePath;
      creationMode = this.settings.creationMode;
      indexFileName = this.settings.indexFileName || "index";
    } else if (!foundCustomType && !this.settings.postsFolder && !this.settings.onlyAutomateInPostsFolder) {
      if (!path.includes("/") || path.includes("/") && !path.startsWith("/") && path.split("/").length === 2) {
        let shouldExcludeFromPosts = false;
        if (this.settings.enablePages && this.settings.pagesFolder && path.startsWith(this.settings.pagesFolder + "/")) {
          shouldExcludeFromPosts = true;
        }
        if (this.settings.excludedDirectories) {
          const excludedDirs = this.settings.excludedDirectories.split("|").map((dir) => dir.trim()).filter((dir) => dir);
          for (const excludedDir of excludedDirs) {
            if (path.startsWith(excludedDir + "/") || path === excludedDir) {
              shouldExcludeFromPosts = true;
              break;
            }
          }
        }
        if (!shouldExcludeFromPosts) {
          basePath = this.settings.postsLinkBasePath;
          creationMode = this.settings.creationMode;
          indexFileName = this.settings.indexFileName || "index";
        }
      }
    }
    if (contentFolder) {
      path = path.slice(contentFolder.length + 1);
    }
    let addTrailingSlash = false;
    const parts = path.split("/");
    const lastPart = parts[parts.length - 1];
    if (indexFileName && indexFileName.trim() !== "" && lastPart === indexFileName) {
      parts.pop();
      path = parts.join("/");
      addTrailingSlash = true;
    } else if ((!indexFileName || indexFileName.trim() === "") && lastPart === "index") {
      parts.pop();
      path = parts.join("/");
      addTrailingSlash = true;
    }
    const slugParts = path.split("/").map((part) => this.toKebabCase(part));
    const slug = slugParts.join("/");
    if (basePath) {
      if (!basePath.startsWith("/")) {
        basePath = "/" + basePath;
      }
      if (!basePath.endsWith("/")) {
        basePath += "/";
      }
    } else {
      basePath = "/";
    }
    const shouldAddTrailingSlash = this.settings.addTrailingSlashToLinks || addTrailingSlash;
    return `${basePath}${slug}${shouldAddTrailingSlash ? "/" : ""}${anchor}`;
  }
  getAstroUrlFromInternalLinkWithContext(link, currentFilePath, currentFileContentType) {
    const hashIndex = link.indexOf("#");
    let path = hashIndex >= 0 ? link.slice(0, hashIndex) : link;
    const anchor = hashIndex >= 0 ? link.slice(hashIndex) : "";
    path = decodeURIComponent(path);
    path = path.replace(/\.md$/, "");
    let basePath = "";
    let contentFolder = "";
    let creationMode = "file";
    let indexFileName = "";
    const targetContentType = this.getContentTypeForPath(path + ".md");
    if (!targetContentType.basePath && currentFileContentType.basePath) {
      basePath = currentFileContentType.basePath;
      creationMode = currentFileContentType.creationMode;
      indexFileName = currentFileContentType.indexFileName;
    } else {
      basePath = targetContentType.basePath;
      creationMode = targetContentType.creationMode;
      indexFileName = targetContentType.indexFileName;
    }
    const targetPath = path + ".md";
    for (const customType of this.settings.customContentTypes) {
      if (customType.enabled && customType.folder && targetPath.startsWith(customType.folder + "/")) {
        contentFolder = customType.folder;
        break;
      }
    }
    if (!contentFolder && this.settings.enablePages && this.settings.pagesFolder && targetPath.startsWith(this.settings.pagesFolder + "/")) {
      contentFolder = this.settings.pagesFolder;
    }
    if (!contentFolder && this.settings.postsFolder && targetPath.startsWith(this.settings.postsFolder + "/")) {
      contentFolder = this.settings.postsFolder;
    }
    if (contentFolder) {
      path = path.slice(contentFolder.length + 1);
    }
    let addTrailingSlash = false;
    const parts = path.split("/");
    const lastPart = parts[parts.length - 1];
    if (indexFileName && indexFileName.trim() !== "" && lastPart === indexFileName) {
      parts.pop();
      path = parts.join("/");
      addTrailingSlash = true;
    } else if ((!indexFileName || indexFileName.trim() === "") && lastPart === "index") {
      parts.pop();
      path = parts.join("/");
      addTrailingSlash = true;
    }
    const slugParts = path.split("/").map((part) => this.toKebabCase(part));
    const slug = slugParts.join("/");
    if (basePath) {
      if (!basePath.startsWith("/")) {
        basePath = "/" + basePath;
      }
      if (!basePath.endsWith("/")) {
        basePath += "/";
      }
    } else {
      basePath = "/";
    }
    const shouldAddTrailingSlash = this.settings.addTrailingSlashToLinks || addTrailingSlash;
    return `${basePath}${slug}${shouldAddTrailingSlash ? "/" : ""}${anchor}`;
  }
  getContentTypeForPath(filePath) {
    for (const customType of this.settings.customContentTypes) {
      if (customType.enabled && customType.folder && filePath.startsWith(customType.folder + "/")) {
        return {
          basePath: customType.linkBasePath || "",
          creationMode: customType.creationMode,
          indexFileName: customType.indexFileName
        };
      }
    }
    if (this.settings.enablePages) {
      if (this.settings.pagesFolder && filePath.startsWith(this.settings.pagesFolder + "/")) {
        return {
          basePath: this.settings.pagesLinkBasePath,
          creationMode: this.settings.pagesCreationMode || "file",
          indexFileName: this.settings.pagesIndexFileName || ""
        };
      } else if (!this.settings.pagesFolder && !filePath.includes("/")) {
        return {
          basePath: this.settings.pagesLinkBasePath,
          creationMode: this.settings.pagesCreationMode || "file",
          indexFileName: this.settings.pagesIndexFileName || ""
        };
      }
    }
    if (this.settings.postsFolder && filePath.startsWith(this.settings.postsFolder + "/")) {
      return {
        basePath: this.settings.postsLinkBasePath,
        creationMode: this.settings.creationMode,
        indexFileName: this.settings.indexFileName || "index"
      };
    }
    if (!this.settings.postsFolder && this.settings.automatePostCreation) {
      return {
        basePath: this.settings.postsLinkBasePath,
        creationMode: this.settings.creationMode,
        indexFileName: this.settings.indexFileName || "index"
      };
    }
    return {
      basePath: "",
      creationMode: "file",
      indexFileName: ""
    };
  }
  async convertWikilinksForAstro(editor, file) {
    if (!(file instanceof import_obsidian3.TFile)) {
      new import_obsidian3.Notice("No active file.");
      return;
    }
    const content = editor.getValue();
    let newContent = content;
    const currentFileContentType = this.getContentTypeForPath(file.path);
    const imageExtensions = /\.(png|jpg|jpeg|gif|svg)$/i;
    newContent = newContent.replace(
      /\[\[([^\]|]+)(\|([^\]]+))?\]\]/g,
      (match, linkText, _pipe, displayText) => {
        if (imageExtensions.test(linkText)) {
          return match;
        }
        const display = displayText || linkText.replace(/\.md$/, "");
        const url = this.getAstroUrlFromInternalLinkWithContext(linkText, file.path, currentFileContentType);
        return `[${display}](${url})`;
      }
    );
    newContent = newContent.replace(
      /\[([^\]]+)\]\(([^)]+)\)/g,
      (match, displayText, link) => {
        if (link.match(/^https?:\/\//) || imageExtensions.test(link)) {
          return match;
        }
        if (!link.includes(".md")) {
          return match;
        }
        const url = this.getAstroUrlFromInternalLinkWithContext(link, file.path, currentFileContentType);
        return `[${displayText}](${url})`;
      }
    );
    newContent = newContent.replace(
      /!\[(.*?)\]\(([^)]+)\)/g,
      (match) => {
        return match;
      }
    );
    newContent = newContent.replace(/\{\{([^}]+)\}\}/g, (match, fileName) => {
      if (imageExtensions.test(fileName)) {
        return match;
      }
      const url = this.getAstroUrlFromInternalLinkWithContext(fileName, file.path, currentFileContentType);
      return `[Embedded: ${fileName}](${url})`;
    });
    editor.setValue(newContent);
    new import_obsidian3.Notice("All internal links converted for Astro.");
  }
};

// src/ui/title-modal.ts
var import_obsidian4 = require("obsidian");
var TitleModal = class extends import_obsidian4.Modal {
  constructor(app, file, plugin, type = "post", isRename = false, isNewNote = false) {
    super(app);
    this.file = file;
    this.plugin = plugin;
    this.type = type;
    this.isRename = isRename;
    this.isNewNote = isNewNote;
    const settings = plugin.settings;
    this.fileOps = new FileOperations(app, settings);
    this.templateParser = new TemplateParser(app, settings);
  }
  getCurrentTitle() {
    if (!this.file) {
      return "";
    }
    const titleKey = this.fileOps.getTitleKey(this.type);
    const cache = this.app.metadataCache.getFileCache(this.file);
    let basename = this.file.basename;
    if (this.file.parent && this.plugin.settings.indexFileName && this.plugin.settings.indexFileName.trim() !== "" && basename === this.plugin.settings.indexFileName) {
      basename = this.file.parent.name;
    }
    if (basename.startsWith("_")) {
      basename = basename.slice(1);
    }
    const fallbackTitle = basename.replace(/-/g, " ").split(" ").map((word) => word.charAt(0).toUpperCase() + word.slice(1)).join(" ");
    if ((cache == null ? void 0 : cache.frontmatter) && cache.frontmatter[titleKey]) {
      return cache.frontmatter[titleKey];
    }
    return fallbackTitle;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    const isMobile = window.innerWidth <= 768 || /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    if (isMobile) {
      this.modalEl.addClass("astro-composer-mobile-modal");
    }
    if (this.isRename) {
      const typeName = this.getTypeDisplayName();
      const isCustomType = this.fileOps.isCustomContentType(this.type);
      if (isCustomType) {
        contentEl.createEl("h2", { text: `Rename Custom Type: ${typeName}` });
        contentEl.createEl("p", { text: "Enter a new title for this content type:" });
      } else if (this.type === "note") {
        contentEl.createEl("h2", { text: "Rename Custom Content Type" });
        contentEl.createEl("p", { text: "Enter a title for this content type:" });
      } else {
        contentEl.createEl("h2", { text: `Rename ${typeName}` });
        contentEl.createEl("p", { text: `Enter new title for your ${typeName.toLowerCase()}:` });
      }
      this.titleInput = contentEl.createEl("input", {
        type: "text",
        placeholder: `My Renamed ${typeName}`,
        cls: "astro-composer-title-input"
      });
      this.titleInput.value = this.getCurrentTitle();
    } else if (this.isNewNote) {
      const typeName = this.getTypeDisplayName();
      const isCustomType = this.fileOps.isCustomContentType(this.type);
      if (isCustomType) {
        contentEl.createEl("h2", { text: `New Custom Type: ${typeName}` });
        contentEl.createEl("p", { text: "Enter a title for this content type:" });
      } else {
        contentEl.createEl("h2", { text: `Create New ${typeName}` });
        contentEl.createEl("p", { text: `Enter a title for your new ${typeName.toLowerCase()}:` });
      }
      this.titleInput = contentEl.createEl("input", {
        type: "text",
        placeholder: `My Awesome ${typeName}`,
        cls: "astro-composer-title-input"
      });
    } else {
      const typeName = this.getTypeDisplayName();
      const isCustomType = this.fileOps.isCustomContentType(this.type);
      if (isCustomType) {
        contentEl.createEl("h2", { text: `New Custom Type: ${typeName}` });
        contentEl.createEl("p", { text: "Enter a title for this content type:" });
      } else {
        contentEl.createEl("h2", { text: `New ${typeName}` });
        contentEl.createEl("p", { text: `Enter a title for your ${typeName.toLowerCase()}:` });
      }
      this.titleInput = contentEl.createEl("input", {
        type: "text",
        placeholder: `My Awesome ${typeName}`,
        cls: "astro-composer-title-input"
      });
    }
    this.titleInput.focus();
    const buttonContainer = contentEl.createDiv({ cls: "astro-composer-button-container" });
    const cancelButton = buttonContainer.createEl("button", { text: "Cancel", cls: "astro-composer-cancel-button" });
    cancelButton.onclick = () => this.close();
    const submitButton = buttonContainer.createEl("button", { text: this.isRename ? "Rename" : "Create", cls: ["astro-composer-create-button", "mod-cta"] });
    submitButton.onclick = () => this.submit();
    this.titleInput.addEventListener("keypress", (e) => {
      if (e.key === "Enter")
        this.submit();
    });
  }
  async submit() {
    const title = this.titleInput.value.trim();
    if (!title) {
      new import_obsidian4.Notice("Please enter a title.");
      return;
    }
    try {
      let newFile = null;
      if (this.isRename) {
        newFile = await this.fileOps.renameFile({ file: this.file, title, type: this.type });
        if (newFile) {
          await this.templateParser.updateTitleInFrontmatter(newFile, title, this.type);
        }
      } else if (this.isNewNote) {
        newFile = await this.createNewFile(title);
      } else if (this.file) {
        newFile = await this.fileOps.createFile({ file: this.file, title, type: this.type });
        if (newFile && this.plugin.settings.autoInsertProperties) {
          await this.addPropertiesToFile(newFile, title, this.type);
        }
      } else {
        newFile = await this.createNewFile(title);
      }
      if (!newFile) {
        throw new Error("Failed to process the content.");
      }
    } catch (error) {
      new import_obsidian4.Notice(`Error ${this.isRename ? "renaming" : "creating"} ${this.type}: ${error.message}.`);
    }
    this.close();
  }
  getTypeDisplayName() {
    if (this.fileOps.isCustomContentType(this.type)) {
      const customType = this.fileOps.getCustomContentType(this.type);
      return customType ? customType.name : "Content";
    }
    return this.type === "post" ? "Blog Post" : "Page";
  }
  async createNewFile(title) {
    var _a, _b;
    let targetFolder;
    const originalDir = ((_b = (_a = this.file) == null ? void 0 : _a.parent) == null ? void 0 : _b.path) || "";
    if (this.fileOps.isCustomContentType(this.type)) {
      const customType = this.fileOps.getCustomContentType(this.type);
      if (originalDir === "" || originalDir === "/") {
        targetFolder = (customType == null ? void 0 : customType.folder) || "";
      } else {
        targetFolder = originalDir;
      }
    } else if (this.type === "page") {
      targetFolder = this.plugin.settings.pagesFolder || originalDir;
    } else {
      targetFolder = this.plugin.settings.postsFolder || originalDir;
    }
    const filename = this.fileOps.generateFilename(title);
    const filePath = targetFolder ? `${targetFolder}/${filename}.md` : `${filename}.md`;
    let initialContent = "";
    if (this.plugin.settings.autoInsertProperties) {
      initialContent = await this.generateInitialContent(title);
    }
    try {
      const newFile = await this.app.vault.create(filePath, initialContent);
      if (this.plugin && "pluginCreatedFiles" in this.plugin) {
        this.plugin.pluginCreatedFiles.add(filePath);
      }
      await this.app.workspace.getLeaf().openFile(newFile);
      return newFile;
    } catch (error) {
      throw new Error(`Failed to create file: ${error.message}`);
    }
  }
  async generateInitialContent(title) {
    const now = new Date();
    const dateString = window.moment(now).format(this.plugin.settings.dateFormat);
    let template;
    if (this.type === "note") {
      template = `---
title: "${title}"
date: ${dateString}
---
`;
    } else if (this.fileOps.isCustomContentType(this.type)) {
      const customType = this.fileOps.getCustomContentType(this.type);
      template = customType ? customType.template : this.plugin.settings.defaultTemplate;
    } else {
      template = this.type === "post" ? this.plugin.settings.defaultTemplate : this.plugin.settings.pageTemplate;
    }
    template = template.replace(/\{\{title\}\}/g, title);
    template = template.replace(/\{\{date\}\}/g, dateString);
    return template;
  }
  async addPropertiesToFile(file, title, type = "post") {
    const now = new Date();
    const dateString = window.moment(now).format(this.plugin.settings.dateFormat);
    let template;
    if (type === "note") {
      template = `---
title: "${title}"
date: ${dateString}
---
`;
    } else if (this.fileOps.isCustomContentType(type)) {
      const customType = this.fileOps.getCustomContentType(type);
      template = customType ? customType.template : this.plugin.settings.defaultTemplate;
    } else {
      template = type === "post" ? this.plugin.settings.defaultTemplate : this.plugin.settings.pageTemplate;
    }
    template = template.replace(/\{\{title\}\}/g, title);
    template = template.replace(/\{\{date\}\}/g, dateString);
    await this.app.vault.modify(file, template);
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/commands/index.ts
function registerCommands(plugin, settings) {
  const fileOps = new FileOperations(plugin.app, settings, plugin);
  const linkConverter = new LinkConverter(settings);
  function hasMatchingContentType(file, settings2) {
    const filePath = file.path;
    const postsFolder = settings2.postsFolder || "";
    const pagesFolder = settings2.enablePages ? settings2.pagesFolder || "" : "";
    if (settings2.automatePostCreation) {
      if (postsFolder) {
        if (filePath.startsWith(postsFolder + "/") || filePath === postsFolder) {
          return true;
        }
      } else {
        if (!filePath.includes("/") || filePath.includes("/") && !filePath.startsWith("/") && filePath.split("/").length === 2) {
          return true;
        }
      }
    }
    if (settings2.enablePages) {
      if (pagesFolder && (filePath.startsWith(pagesFolder + "/") || filePath === pagesFolder)) {
        return true;
      } else if (!pagesFolder && !filePath.includes("/")) {
        return true;
      }
    }
    const type = fileOps.determineType(file);
    if (fileOps.isCustomContentType(type)) {
      const customType = fileOps.getCustomContentType(type);
      if (customType && customType.enabled) {
        return true;
      }
    }
    return false;
  }
  plugin.addCommand({
    id: "standardize-properties",
    name: "Standardize Properties",
    icon: "file-check",
    editorCallback: (editor, ctx) => {
      if (ctx.file instanceof import_obsidian5.TFile) {
        standardizeProperties(plugin.app, settings, ctx.file, plugin);
      }
    }
  });
  plugin.addCommand({
    id: "convert-wikilinks-astro",
    name: "Convert internal links for Astro",
    icon: "link-2",
    editorCallback: (editor, ctx) => {
      if (ctx.file instanceof import_obsidian5.TFile) {
        linkConverter.convertWikilinksForAstro(editor, ctx.file);
      }
    }
  });
  plugin.addCommand({
    id: "rename-content",
    name: "Rename Current Content",
    icon: "pencil",
    editorCallback: (editor, ctx) => {
      if (ctx.file instanceof import_obsidian5.TFile) {
        if (!hasMatchingContentType(ctx.file, settings)) {
          new import_obsidian5.Notice("Cannot rename: This file is not part of a configured content type folder.");
          return;
        }
        const type = fileOps.determineType(ctx.file);
        const cache = plugin.app.metadataCache.getFileCache(ctx.file);
        const titleKey = fileOps.getTitleKey(type);
        if (!(cache == null ? void 0 : cache.frontmatter) || !(titleKey in cache.frontmatter)) {
          new import_obsidian5.Notice(`Cannot rename: No ${titleKey} found in properties`);
          return;
        }
        new TitleModal(plugin.app, ctx.file, plugin, type, true).open();
      }
    }
  });
}
async function standardizeProperties(app, settings, file, plugin) {
  const templateParser = new TemplateParser(app, settings);
  const fileOps = new FileOperations(app, settings, plugin);
  const type = fileOps.determineType(file);
  let templateString;
  const filePath = file.path;
  const postsFolder = settings.postsFolder || "";
  const pagesFolder = settings.enablePages ? settings.pagesFolder || "" : "";
  let hasMatchingContentType = false;
  if (settings.automatePostCreation) {
    if (postsFolder) {
      if (filePath.startsWith(postsFolder + "/") || filePath === postsFolder) {
        hasMatchingContentType = true;
      }
    } else {
      if (!filePath.includes("/") || filePath.includes("/") && !filePath.startsWith("/") && filePath.split("/").length === 2) {
        hasMatchingContentType = true;
      }
    }
  }
  if (!hasMatchingContentType && settings.enablePages) {
    if (pagesFolder && (filePath.startsWith(pagesFolder + "/") || filePath === pagesFolder)) {
      hasMatchingContentType = true;
    } else if (!pagesFolder && !filePath.includes("/")) {
      hasMatchingContentType = true;
    }
  }
  if (!hasMatchingContentType && fileOps.isCustomContentType(type)) {
    const customType = fileOps.getCustomContentType(type);
    if (customType && customType.enabled) {
      hasMatchingContentType = true;
    }
  }
  if (!hasMatchingContentType) {
    new import_obsidian5.Notice("No properties template specified for this content. This file doesn't match any configured content type folders.");
    return;
  }
  if (fileOps.isCustomContentType(type)) {
    const customType = fileOps.getCustomContentType(type);
    templateString = customType ? customType.template : settings.defaultTemplate;
  } else {
    const isPage = type === "page";
    templateString = isPage ? settings.pageTemplate : settings.defaultTemplate;
  }
  await new Promise((resolve) => setTimeout(resolve, 100));
  const content = await app.vault.read(file);
  const title = file.basename.replace(/^_/, "");
  const parsed = await templateParser.parseFrontmatter(content);
  const { templateProps, templateValues } = templateParser.parseTemplate(templateString, title);
  const finalProps = { ...parsed.properties };
  const arrayKeys = /* @__PURE__ */ new Set();
  for (const key of templateProps) {
    if (!(key in parsed.properties)) {
      const templateValue = templateValues[key];
      if (Array.isArray(templateValue)) {
        finalProps[key] = templateValue;
        arrayKeys.add(key);
      } else {
        finalProps[key] = [templateValue || ""];
      }
    } else {
      const templateValue = templateValues[key];
      const isArrayValue = Array.isArray(templateValue);
      if (isArrayValue) {
        const existingItems = parsed.properties[key] || [];
        const newItems = templateValue.filter((item) => !existingItems.includes(item));
        finalProps[key] = [...existingItems, ...newItems];
        arrayKeys.add(key);
      }
    }
  }
  for (const key in parsed.properties) {
    if (parsed.properties[key].length > 1) {
      arrayKeys.add(key);
    }
  }
  const newContent = templateParser.buildFrontmatterContent(finalProps, arrayKeys) + parsed.bodyContent;
  await app.vault.modify(file, newContent);
  new import_obsidian5.Notice("Properties standardized using template.");
}

// src/ui/settings-tab.ts
var import_obsidian6 = require("obsidian");
var AstroComposerSettingTab = class extends import_obsidian6.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.autoRenameContainer = null;
    this.postsFolderContainer = null;
    this.onlyAutomateContainer = null;
    this.creationModeContainer = null;
    this.indexFileContainer = null;
    this.excludedDirsContainer = null;
    this.underscorePrefixContainer = null;
    this.autoInsertContainer = null;
    this.pagesFieldsContainer = null;
    this.pagesIndexFileContainer = null;
    this.copyHeadingContainer = null;
    this.customContentTypesContainer = null;
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    const settings = this.plugin.settings;
    new import_obsidian6.Setting(containerEl).setName("Date format").setDesc("Format for the date in properties (e.g., YYYY-MM-DD, MMMM D, YYYY, YYYY-MM-DD HH:mm).").addText(
      (text) => text.setPlaceholder("YYYY-MM-DD").setValue(settings.dateFormat).onChange(async (value) => {
        settings.dateFormat = value || "YYYY-MM-DD";
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian6.Setting(containerEl).setName("Enable copy heading links").setDesc("Add right-click context menu option to copy heading links in various formats.").addToggle(
      (toggle) => toggle.setValue(settings.enableCopyHeadingLink).onChange(async (value) => {
        settings.enableCopyHeadingLink = value;
        await this.plugin.saveSettings();
        this.updateCopyHeadingFields();
      })
    );
    this.copyHeadingContainer = containerEl.createDiv({ cls: "copy-heading-fields" });
    this.copyHeadingContainer.style.display = settings.enableCopyHeadingLink ? "block" : "none";
    new import_obsidian6.Setting(this.copyHeadingContainer).setName("Default heading link format").setDesc("Choose the default format for copied heading links. Obsidian format respects your Obsidian settings for wikilink vs markdown preference. Astro link uses your Link base path from above and converts the heading into kebab-case format as an anchor link.").addDropdown(
      (dropdown) => dropdown.addOption("obsidian", "Obsidian link").addOption("astro", "Astro link").setValue(settings.copyHeadingLinkFormat).onChange(async (value) => {
        settings.copyHeadingLinkFormat = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian6.Setting(containerEl).setName("Add trailing slash to links").setDesc("Add trailing slashes to all converted internal links (e.g., /about/ instead of /about).").addToggle(
      (toggle) => toggle.setValue(settings.addTrailingSlashToLinks).onChange(async (value) => {
        settings.addTrailingSlashToLinks = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian6.Setting(containerEl).setName("Post settings").setDesc("").setHeading();
    new import_obsidian6.Setting(containerEl).setName("Automate post creation").setDesc("Automatically show title dialog for new .md files, rename them based on the title, and insert properties if enabled.").addToggle(
      (toggle) => toggle.setValue(settings.automatePostCreation).onChange(async (value) => {
        settings.automatePostCreation = value;
        settings.autoInsertProperties = value;
        await this.plugin.saveSettings();
        this.plugin.registerCreateEvent();
        this.updateConditionalFields();
      })
    );
    this.autoRenameContainer = containerEl.createDiv({ cls: "auto-rename-fields" });
    this.autoRenameContainer.style.display = settings.automatePostCreation ? "block" : "none";
    this.autoInsertContainer = this.autoRenameContainer.createDiv();
    new import_obsidian6.Setting(this.autoInsertContainer).setName("Auto-insert properties").setDesc("Automatically insert the properties template when creating new files (requires 'Automate post creation' to be enabled).").addToggle(
      (toggle) => toggle.setValue(settings.autoInsertProperties).setDisabled(!settings.automatePostCreation).onChange(async (value) => {
        settings.autoInsertProperties = value;
        await this.plugin.saveSettings();
      })
    );
    this.postsFolderContainer = this.autoRenameContainer.createDiv();
    new import_obsidian6.Setting(this.postsFolderContainer).setName("Posts folder").setDesc("Folder name for blog posts (leave blank to use the vault folder). You can specify the default location for new notes in Obsidian's 'Files and links' settings.").addText(
      (text) => text.setPlaceholder("Enter folder path").setValue(settings.postsFolder).onChange(async (value) => {
        settings.postsFolder = value;
        await this.plugin.saveSettings();
        this.updateOnlyAutomateField();
        this.updateExcludedDirsField();
      })
    );
    this.onlyAutomateContainer = this.autoRenameContainer.createDiv();
    new import_obsidian6.Setting(this.onlyAutomateContainer).setName("Ignore subfolders").setDesc("When enabled, automation will only trigger for new .md files within the Posts folder and one level down (for folder-based posts). Files in deeper subfolders will be ignored.").addToggle(
      (toggle) => toggle.setValue(settings.onlyAutomateInPostsFolder).onChange(async (value) => {
        settings.onlyAutomateInPostsFolder = value;
        await this.plugin.saveSettings();
        this.updateExcludedDirsField();
      })
    );
    this.excludedDirsContainer = this.autoRenameContainer.createDiv({ cls: "excluded-dirs-field" });
    this.excludedDirsContainer.style.display = !settings.onlyAutomateInPostsFolder ? "block" : "none";
    new import_obsidian6.Setting(this.excludedDirsContainer).setName("Excluded directories").setDesc("Directories to exclude from automatic post creation (e.g., pages|posts/example). Excluded directories and their child folders will be ignored. Use '|' to separate multiple directories.").addText(
      (text) => text.setPlaceholder("pages|posts/example").setValue(settings.excludedDirectories).onChange(async (value) => {
        settings.excludedDirectories = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian6.Setting(this.autoRenameContainer).setName("Posts link base path").setDesc("Base path for converted links in posts (e.g., /blog/, leave blank for root /).").addText(
      (text) => text.setPlaceholder("/blog/").setValue(settings.postsLinkBasePath).onChange(async (value) => {
        settings.postsLinkBasePath = value;
        await this.plugin.saveSettings();
      })
    );
    this.creationModeContainer = this.autoRenameContainer.createDiv();
    new import_obsidian6.Setting(this.creationModeContainer).setName("Creation mode").setDesc("How to create new entries: file-based or folder-based with an index file.").addDropdown(
      (dropdown) => dropdown.addOption("file", "File-based (post-title.md)").addOption("folder", "Folder-based (post-title/index.md)").setValue(settings.creationMode).onChange(async (value) => {
        settings.creationMode = value;
        await this.plugin.saveSettings();
        this.updateIndexFileField();
      })
    );
    this.indexFileContainer = this.autoRenameContainer.createDiv({ cls: "index-file-field" });
    this.indexFileContainer.style.display = settings.creationMode === "folder" ? "block" : "none";
    new import_obsidian6.Setting(this.indexFileContainer).setName("Index file name").setDesc("Name for index files in folder-based content (without .md extension). Defaults to 'index' if left blank.").addText(
      (text) => text.setPlaceholder("index").setValue(settings.indexFileName).onChange(async (value) => {
        settings.indexFileName = value;
        await this.plugin.saveSettings();
      })
    );
    this.underscorePrefixContainer = this.autoRenameContainer.createDiv();
    new import_obsidian6.Setting(this.underscorePrefixContainer).setName("Use underscore prefix for drafts").setDesc("Add an underscore prefix (_post-title) to new notes by default when enabled. This hides them from Astro, which can be helpful for post drafts. Disable to skip prefixing.").addToggle(
      (toggle) => toggle.setValue(settings.enableUnderscorePrefix).onChange(async (value) => {
        settings.enableUnderscorePrefix = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian6.Setting(containerEl).setName("Post properties template").addTextArea((text) => {
      text.setPlaceholder(
        '---\ntitle: "{{title}}"\ndate: {{date}}\ntags: []\n---\n'
      ).setValue(settings.defaultTemplate).onChange(async (value) => {
        settings.defaultTemplate = value;
        await this.plugin.saveSettings();
      });
      text.inputEl.classList.add("astro-composer-template-textarea");
      return text;
    }).then((setting) => {
      setting.descEl.empty();
      const descDiv = setting.descEl.createEl("div");
      descDiv.innerHTML = "Used for new posts and when standardizing properties.<br />Variables include {{title}} and {{date}}.<br />Do not wrap {{date}} in quotes as it represents a datetime value, not a string.<br />The 'standardize properties' command ignores anything below the second '---' line.";
    });
    new import_obsidian6.Setting(containerEl).setName("Page settings").setDesc("").setHeading();
    new import_obsidian6.Setting(containerEl).setName("Enable pages").setDesc("Enable page content type for static pages.").addToggle(
      (toggle) => toggle.setValue(settings.enablePages).onChange(async (value) => {
        settings.enablePages = value;
        await this.plugin.saveSettings();
        this.plugin.registerCreateEvent();
        this.updatePagesFields();
      })
    );
    this.pagesFieldsContainer = containerEl.createDiv({ cls: "pages-fields" });
    this.pagesFieldsContainer.style.display = settings.enablePages ? "block" : "none";
    new import_obsidian6.Setting(this.pagesFieldsContainer).setName("Pages folder").setDesc("Folder name for pages (leave blank to use the vault folder).").addText(
      (text) => text.setPlaceholder("Enter folder path").setValue(settings.pagesFolder).onChange(async (value) => {
        settings.pagesFolder = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian6.Setting(this.pagesFieldsContainer).setName("Pages link base path").setDesc("Base path for converted links in pages (e.g., /about/, leave blank for root /).").addText(
      (text) => text.setPlaceholder("/").setValue(settings.pagesLinkBasePath).onChange(async (value) => {
        settings.pagesLinkBasePath = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian6.Setting(this.pagesFieldsContainer).setName("Creation mode").setDesc("How to create new entries: file-based or folder-based with an index file.").addDropdown(
      (dropdown) => dropdown.addOption("file", "File-based (page-title.md)").addOption("folder", "Folder-based (page-title/index.md)").setValue(settings.pagesCreationMode || "file").onChange(async (value) => {
        settings.pagesCreationMode = value;
        await this.plugin.saveSettings();
        this.updatePagesIndexFileField();
      })
    );
    this.pagesIndexFileContainer = this.pagesFieldsContainer.createDiv({ cls: "pages-index-file-field" });
    this.pagesIndexFileContainer.style.display = (settings.pagesCreationMode || "file") === "folder" ? "block" : "none";
    new import_obsidian6.Setting(this.pagesIndexFileContainer).setName("Index file name").setDesc("Name for index files in folder-based content (without .md extension). Defaults to 'index' if left blank.").addText(
      (text) => text.setPlaceholder("index").setValue(settings.pagesIndexFileName || "").onChange(async (value) => {
        settings.pagesIndexFileName = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian6.Setting(this.pagesFieldsContainer).setName("Page properties template").setDesc("Template for new page files. Variables include {{title}} and {{date}}.").addTextArea((text) => {
      text.setPlaceholder('---\ntitle: "{{title}}"\ndescription: ""\n---\n').setValue(settings.pageTemplate).onChange(async (value) => {
        settings.pageTemplate = value;
        await this.plugin.saveSettings();
      });
      text.inputEl.classList.add("astro-composer-template-textarea");
      return text;
    });
    new import_obsidian6.Setting(containerEl).setName("Custom content types").setDesc("").setHeading();
    this.customContentTypesContainer = containerEl.createDiv({ cls: "custom-content-types-container" });
    this.renderCustomContentTypes();
    this.updateConditionalFields();
    this.updateIndexFileField();
    this.updateExcludedDirsField();
    this.updateOnlyAutomateField();
    this.updatePagesFields();
    this.updateCopyHeadingFields();
  }
  updateConditionalFields() {
    if (this.autoRenameContainer) {
      const settings = this.plugin.settings;
      this.autoRenameContainer.style.display = settings.automatePostCreation ? "block" : "none";
    }
  }
  updateIndexFileField() {
    if (this.indexFileContainer) {
      const settings = this.plugin.settings;
      this.indexFileContainer.style.display = settings.creationMode === "folder" ? "block" : "none";
    }
  }
  updateOnlyAutomateField() {
    if (this.onlyAutomateContainer) {
      const settings = this.plugin.settings;
      this.onlyAutomateContainer.style.display = settings.postsFolder ? "block" : "none";
    }
  }
  updateExcludedDirsField() {
    if (this.excludedDirsContainer) {
      const settings = this.plugin.settings;
      this.excludedDirsContainer.style.display = settings.postsFolder && !settings.onlyAutomateInPostsFolder ? "block" : "none";
    }
  }
  updatePagesFields() {
    if (this.pagesFieldsContainer) {
      const settings = this.plugin.settings;
      this.pagesFieldsContainer.style.display = settings.enablePages ? "block" : "none";
    }
  }
  updateCopyHeadingFields() {
    if (this.copyHeadingContainer) {
      const settings = this.plugin.settings;
      this.copyHeadingContainer.style.display = settings.enableCopyHeadingLink ? "block" : "none";
    }
  }
  checkForFolderConflicts() {
    const settings = this.plugin.settings;
    const blankFolders = [];
    const folderConflicts = {};
    if (!settings.postsFolder && settings.automatePostCreation) {
      blankFolders.push("Posts");
    } else if (settings.postsFolder && settings.automatePostCreation) {
      if (!folderConflicts[settings.postsFolder]) {
        folderConflicts[settings.postsFolder] = [];
      }
      folderConflicts[settings.postsFolder].push("Posts");
    }
    if (!settings.pagesFolder && settings.enablePages) {
      blankFolders.push("Pages");
    } else if (settings.pagesFolder && settings.enablePages) {
      if (!folderConflicts[settings.pagesFolder]) {
        folderConflicts[settings.pagesFolder] = [];
      }
      folderConflicts[settings.pagesFolder].push("Pages");
    }
    for (const customType of settings.customContentTypes) {
      if (customType.enabled) {
        if (!customType.folder) {
          blankFolders.push(customType.name || "Custom Content");
        } else {
          if (!folderConflicts[customType.folder]) {
            folderConflicts[customType.folder] = [];
          }
          folderConflicts[customType.folder].push(customType.name || "Custom Content");
        }
      }
    }
    let hasConflicts = false;
    let conflictMessage = "";
    if (blankFolders.length > 1) {
      hasConflicts = true;
      conflictMessage += `Multiple content types are set to use the vault root: <strong>${blankFolders.join(", ")}</strong><br><br>`;
    }
    for (const [folder, contentTypes] of Object.entries(folderConflicts)) {
      if (contentTypes.length > 1) {
        hasConflicts = true;
        conflictMessage += `Multiple content types are set to use the same folder "${folder}": <strong>${contentTypes.join(", ")}</strong><br><br>`;
      }
    }
  }
  addCustomContentType() {
    const settings = this.plugin.settings;
    const newType = {
      id: `custom-${Date.now()}`,
      name: `Custom ${settings.customContentTypes.length + 1}`,
      folder: "",
      linkBasePath: "",
      template: '---\ntitle: "{{title}}"\ndate: {{date}}\n---\n',
      enabled: true,
      creationMode: "file",
      indexFileName: ""
    };
    settings.customContentTypes.push(newType);
    this.plugin.saveSettings();
    this.renderCustomContentTypes();
    this.plugin.registerCreateEvent();
  }
  renderCustomContentTypes() {
    if (!this.customContentTypesContainer)
      return;
    this.customContentTypesContainer.empty();
    const settings = this.plugin.settings;
    settings.customContentTypes.forEach((customType, index) => {
      if (!this.customContentTypesContainer)
        return;
      const typeContainer = this.customContentTypesContainer.createDiv({
        cls: "custom-content-type-item",
        attr: { "data-type-id": customType.id }
      });
      const header = typeContainer.createDiv({ cls: "custom-content-type-header" });
      header.style.display = "flex";
      header.style.justifyContent = "space-between";
      header.style.alignItems = "center";
      header.style.padding = "8px 0";
      const headerName = header.createDiv();
      headerName.createEl("div", { text: `Custom ${index + 1}`, cls: "setting-item-name" });
      const toggleContainer = header.createDiv({ cls: "checkbox-container" });
      if (customType.enabled) {
        toggleContainer.classList.add("is-enabled");
      }
      const toggle = toggleContainer.createEl("input", { type: "checkbox", cls: "checkbox-input" });
      toggle.checked = customType.enabled;
      toggleContainer.addEventListener("click", async (e) => {
        e.preventDefault();
        const newValue = !customType.enabled;
        customType.enabled = newValue;
        toggle.checked = newValue;
        await this.plugin.saveSettings();
        this.plugin.registerCreateEvent();
        if (newValue) {
          toggleContainer.classList.add("is-enabled");
        } else {
          toggleContainer.classList.remove("is-enabled");
        }
        this.updateCustomContentTypeVisibility(customType.id, newValue);
      });
      toggle.addEventListener("change", async (e) => {
        const value = e.target.checked;
        customType.enabled = value;
        await this.plugin.saveSettings();
        this.plugin.registerCreateEvent();
        if (value) {
          toggleContainer.classList.add("is-enabled");
        } else {
          toggleContainer.classList.remove("is-enabled");
        }
        this.updateCustomContentTypeVisibility(customType.id, value);
      });
      const settingsContainer = typeContainer.createDiv({
        cls: "custom-content-type-settings",
        attr: { "data-type-id": customType.id }
      });
      const nameContainer = settingsContainer.createDiv();
      new import_obsidian6.Setting(nameContainer).setName("Content type name").setDesc("Display name for this content type (e.g., 'Projects', 'Notes', 'Tutorials')").addText((text) => {
        text.setPlaceholder("Enter content type name").setValue(customType.name).onChange(async (value) => {
          customType.name = value;
          await this.plugin.saveSettings();
        });
      });
      const folderContainer = settingsContainer.createDiv();
      new import_obsidian6.Setting(folderContainer).setName("Folder location").setDesc("Folder path where this content type will be created (e.g., 'projects', 'notes/tutorials')").addText((text) => {
        text.setPlaceholder("Enter folder path").setValue(customType.folder).onChange(async (value) => {
          customType.folder = value;
          await this.plugin.saveSettings();
          this.plugin.registerCreateEvent();
        });
      });
      const linkContainer = settingsContainer.createDiv();
      new import_obsidian6.Setting(linkContainer).setName("Link base path").setDesc("Base path for converted links (e.g., '/projects/', '/notes/tutorials/', leave blank for root /).").addText((text) => {
        text.setPlaceholder("Enter link base path").setValue(customType.linkBasePath || "").onChange(async (value) => {
          customType.linkBasePath = value;
          await this.plugin.saveSettings();
        });
      });
      const creationModeContainer = settingsContainer.createDiv();
      new import_obsidian6.Setting(creationModeContainer).setName("Creation mode").setDesc("How to create new entries: file-based or folder-based with an index file.").addDropdown(
        (dropdown) => dropdown.addOption("file", "File-based (content-title.md)").addOption("folder", "Folder-based (content-title/index.md)").setValue(customType.creationMode).onChange(async (value) => {
          customType.creationMode = value;
          await this.plugin.saveSettings();
          this.updateCustomContentTypeIndexFileField(customType.id);
        })
      );
      const indexFileContainer = settingsContainer.createDiv({ cls: "custom-index-file-field" });
      indexFileContainer.style.display = customType.creationMode === "folder" ? "block" : "none";
      new import_obsidian6.Setting(indexFileContainer).setName("Index file name").setDesc("Name for index files in folder-based content (without .md extension). Defaults to 'index' if left blank.").addText(
        (text) => text.setPlaceholder("index").setValue(customType.indexFileName).onChange(async (value) => {
          customType.indexFileName = value;
          await this.plugin.saveSettings();
        })
      );
      const templateContainer = settingsContainer.createDiv();
      new import_obsidian6.Setting(templateContainer).setName("Properties template").addTextArea((text) => {
        text.setPlaceholder('---\ntitle: "{{title}}"\ndate: {{date}}\n---\n').setValue(customType.template).onChange(async (value) => {
          customType.template = value;
          await this.plugin.saveSettings();
        });
        text.inputEl.classList.add("astro-composer-template-textarea");
        return text;
      }).then((setting) => {
        setting.descEl.empty();
        const descDiv = setting.descEl.createEl("div");
        descDiv.innerHTML = "Template for new files of this content type.<br />Variables include {{title}} and {{date}}.<br />Do not wrap {{date}} in quotes as it represents a datetime value, not a string.";
      });
      const removeContainer = settingsContainer.createDiv();
      const removeSetting = new import_obsidian6.Setting(removeContainer).setName("").addButton((button) => {
        button.setButtonText("Remove").setWarning().onClick(() => {
          this.removeCustomContentType(customType.id);
        });
      });
      removeSetting.settingEl.style.borderTop = "none";
      this.updateCustomContentTypeVisibility(customType.id, customType.enabled);
    });
    const addButtonContainer = this.customContentTypesContainer.createDiv();
    const addButtonSetting = new import_obsidian6.Setting(addButtonContainer).setName("").addButton((button) => {
      button.setButtonText("Add custom content type").setCta().onClick(() => {
        this.addCustomContentType();
      });
    });
    addButtonSetting.settingEl.style.borderTop = "none";
  }
  updateCustomContentTypeVisibility(typeId, enabled) {
    var _a;
    const settingsContainer = (_a = this.customContentTypesContainer) == null ? void 0 : _a.querySelector(`[data-type-id="${typeId}"].custom-content-type-settings`);
    if (settingsContainer) {
      settingsContainer.style.display = enabled ? "block" : "none";
    }
  }
  updateCustomContentTypeIndexFileField(typeId) {
    var _a;
    const customType = this.plugin.settings.customContentTypes.find((type) => type.id === typeId);
    if (!customType)
      return;
    const indexFileContainer = (_a = this.customContentTypesContainer) == null ? void 0 : _a.querySelector(`[data-type-id="${typeId}"] .custom-index-file-field`);
    if (indexFileContainer) {
      indexFileContainer.style.display = customType.creationMode === "folder" ? "block" : "none";
    }
  }
  updatePagesIndexFileField() {
    if (this.pagesIndexFileContainer) {
      this.pagesIndexFileContainer.style.display = this.plugin.settings.pagesCreationMode === "folder" ? "block" : "none";
    }
  }
  removeCustomContentType(typeId) {
    const settings = this.plugin.settings;
    settings.customContentTypes = settings.customContentTypes.filter((ct) => ct.id !== typeId);
    this.plugin.saveSettings();
    this.renderCustomContentTypes();
    this.plugin.registerCreateEvent();
  }
};

// src/utils/heading-link-generator.ts
var HeadingLinkGenerator = class {
  constructor(settings) {
    this.settings = settings;
  }
  /**
   * Converts text to kebab-case slug for URLs
   */
  toKebabCase(str) {
    return str.toLowerCase().replace(/[^a-z0-9\s-]/g, "").trim().replace(/\s+/g, "-").replace(/-+/g, "-").replace(/^-|-$/g, "");
  }
  /**
   * Gets the Astro-compatible URL from an internal link (copied from LinkConverter)
   */
  getAstroUrlFromInternalLink(link) {
    const hashIndex = link.indexOf("#");
    let path = hashIndex >= 0 ? link.slice(0, hashIndex) : link;
    const anchor = hashIndex >= 0 ? link.slice(hashIndex) : "";
    path = path.replace(/\.md$/, "");
    let basePath = "";
    let contentFolder = "";
    let creationMode = "file";
    let indexFileName = "";
    let foundCustomType = false;
    for (const customType of this.settings.customContentTypes) {
      if (customType.enabled && customType.folder && path.startsWith(customType.folder + "/")) {
        contentFolder = customType.folder;
        basePath = customType.linkBasePath || "";
        creationMode = customType.creationMode;
        indexFileName = customType.indexFileName;
        foundCustomType = true;
        break;
      }
    }
    if (!foundCustomType && this.settings.enablePages && this.settings.pagesFolder && path.startsWith(this.settings.pagesFolder + "/")) {
      contentFolder = this.settings.pagesFolder;
      basePath = this.settings.pagesLinkBasePath;
      creationMode = this.settings.pagesCreationMode || "file";
      indexFileName = this.settings.pagesIndexFileName || "";
    } else if (!foundCustomType && this.settings.postsFolder && path.startsWith(this.settings.postsFolder + "/")) {
      contentFolder = this.settings.postsFolder;
      basePath = this.settings.postsLinkBasePath;
      creationMode = this.settings.creationMode;
      indexFileName = this.settings.indexFileName || "index";
    } else if (!foundCustomType && !this.settings.postsFolder && this.settings.automatePostCreation && !this.settings.onlyAutomateInPostsFolder) {
      basePath = this.settings.postsLinkBasePath;
      creationMode = this.settings.creationMode;
      indexFileName = this.settings.indexFileName || "index";
    }
    if (contentFolder) {
      path = path.slice(contentFolder.length + 1);
    }
    let addTrailingSlash = false;
    if (indexFileName && indexFileName.trim() !== "") {
      const parts = path.split("/");
      if (parts[parts.length - 1] === indexFileName) {
        parts.pop();
        path = parts.join("/");
        addTrailingSlash = true;
      }
    } else if (creationMode === "folder") {
      const defaultIndexName = "index";
      const parts = path.split("/");
      if (parts[parts.length - 1] === defaultIndexName) {
        parts.pop();
        path = parts.join("/");
        addTrailingSlash = true;
      }
    }
    const slugParts = path.split("/").map((part) => this.toKebabCase(part));
    const slug = slugParts.join("/");
    if (basePath) {
      if (!basePath.startsWith("/"))
        basePath = "/" + basePath;
      if (!basePath.endsWith("/"))
        basePath += "/";
    }
    const shouldAddTrailingSlash = this.settings.addTrailingSlashToLinks || addTrailingSlash;
    return `${basePath}${slug}${shouldAddTrailingSlash ? "/" : ""}${anchor}`;
  }
  /**
   * Generates a standard Obsidian link to a heading, respecting user's link format preference
   */
  generateObsidianLink(app, file, heading) {
    const headingText = heading.heading;
    const testLink = app.fileManager.generateMarkdownLink(file, "", "");
    if (testLink.startsWith("[[")) {
      const filePath = file.path.replace(/\.md$/, "");
      return `[[${filePath}#${headingText}|${headingText}]]`;
    } else {
      const anchor = this.toKebabCase(headingText);
      const baseLink = app.fileManager.generateMarkdownLink(file, "", "");
      if (baseLink.startsWith("[[")) {
        const filePath = file.path.replace(/\.md$/, "");
        return `[[${filePath}#${headingText}|${headingText}]]`;
      } else {
        const match = baseLink.match(/\[([^\]]+)\]\(([^)]+)\)/);
        if (match) {
          const [, , path] = match;
          return `[${headingText}](${path}#${encodeURIComponent(anchor)})`;
        } else {
          const encodedFilename = encodeURIComponent(file.name);
          return `[${headingText}](${encodedFilename}#${encodeURIComponent(anchor)})`;
        }
      }
    }
  }
  /**
   * Generates a standard Obsidian wikilink to a heading
   */
  generateObsidianWikilink(file, heading) {
    const headingText = heading.heading;
    const filePath = file.path.replace(/\.md$/, "");
    return `[[${filePath}#${headingText}|${headingText}]]`;
  }
  /**
   * Generates an Astro-compatible markdown link to a heading
   */
  generateAstroLink(file, heading) {
    const headingText = heading.heading;
    const anchor = this.toKebabCase(headingText);
    const internalLink = `${file.path}#${anchor}`;
    const astroUrl = this.getAstroUrlFromInternalLink(internalLink);
    return `[${headingText}](${astroUrl})`;
  }
  /**
   * Generates an Astro-compatible wikilink to a heading
   */
  generateAstroWikilink(file, heading) {
    const headingText = heading.heading;
    const anchor = this.toKebabCase(headingText);
    const internalLink = `${file.path}#${anchor}`;
    const astroUrl = this.getAstroUrlFromInternalLink(internalLink);
    return `[[${headingText}|${astroUrl}]]`;
  }
  /**
   * Generates the appropriate link format based on settings
   */
  generateLink(app, file, heading) {
    if (this.settings.copyHeadingLinkFormat === "astro") {
      return this.generateAstroLink(file, heading);
    } else {
      return this.generateObsidianLink(app, file, heading);
    }
  }
  /**
   * Finds the heading at a specific line in a file
   */
  findHeadingAtLine(app, file, line) {
    const cache = app.metadataCache.getFileCache(file);
    if (!cache || !cache.headings) {
      return null;
    }
    for (let i = cache.headings.length - 1; i >= 0; i--) {
      const heading = cache.headings[i];
      if (heading.position.start.line <= line) {
        return heading;
      }
    }
    return null;
  }
};

// src/main.ts
var AstroComposerPlugin = class extends import_obsidian7.Plugin {
  constructor() {
    super(...arguments);
    this.pluginCreatedFiles = /* @__PURE__ */ new Set();
  }
  async onload() {
    await this.loadSettings();
    this.fileOps = new FileOperations(this.app, this.settings, this);
    this.templateParser = new TemplateParser(this.app, this.settings);
    this.headingLinkGenerator = new HeadingLinkGenerator(this.settings);
    this.app.workspace.onLayoutReady(() => {
      this.registerCreateEvent();
    });
    registerCommands(this, this.settings);
    this.addSettingTab(new AstroComposerSettingTab(this.app, this));
    this.registerContextMenu();
  }
  registerCreateEvent() {
    if (this.createEvent) {
      this.app.vault.off("create", this.createEvent);
    }
    const hasCustomContentTypes = this.settings.customContentTypes.some((ct) => ct.enabled);
    const shouldUseCreateEvent = this.settings.automatePostCreation || this.settings.enablePages || hasCustomContentTypes;
    if (shouldUseCreateEvent) {
      let lastProcessedTime = 0;
      this.createEvent = async (file) => {
        var _a;
        const now = Date.now();
        if (now - lastProcessedTime < CONSTANTS.DEBOUNCE_MS) {
          return;
        }
        lastProcessedTime = now;
        if (file instanceof import_obsidian7.TFile && file.extension === "md") {
          const filePath = file.path;
          if (this.pluginCreatedFiles.has(filePath)) {
            this.pluginCreatedFiles.delete(filePath);
            return;
          }
          const postsFolder = this.settings.postsFolder || "";
          const pagesFolder = this.settings.enablePages ? this.settings.pagesFolder || "" : "";
          let isPage = false;
          let customTypeId = null;
          let shouldProcess = false;
          let isExcluded = false;
          if (postsFolder && this.settings.excludedDirectories) {
            const excludedDirs = this.settings.excludedDirectories.split("|").map((dir) => dir.trim()).filter((dir) => dir);
            for (const excludedDir of excludedDirs) {
              if (filePath === excludedDir || filePath.startsWith(excludedDir + "/")) {
                isExcluded = true;
                break;
              }
            }
          }
          if (isExcluded) {
            return;
          }
          const fileDir = ((_a = file.parent) == null ? void 0 : _a.path) || "";
          const isInVaultRoot = fileDir === "" || fileDir === "/";
          const applicableContentTypes = [];
          if (this.settings.automatePostCreation) {
            if (!postsFolder && isInVaultRoot) {
              applicableContentTypes.push("Posts");
            } else if (postsFolder && (filePath.startsWith(postsFolder + "/") || filePath === postsFolder)) {
              applicableContentTypes.push("Posts");
            }
          }
          if (this.settings.enablePages) {
            if (!pagesFolder && isInVaultRoot) {
              applicableContentTypes.push("Pages");
            } else if (pagesFolder && (filePath.startsWith(pagesFolder + "/") || filePath === pagesFolder)) {
              applicableContentTypes.push("Pages");
            }
          }
          for (const customType of this.settings.customContentTypes) {
            if (customType.enabled) {
              if (!customType.folder && isInVaultRoot) {
                applicableContentTypes.push(customType.name || "Custom Content");
              } else if (customType.folder && (filePath.startsWith(customType.folder + "/") || filePath === customType.folder)) {
                applicableContentTypes.push(customType.name || "Custom Content");
              }
            }
          }
          if (applicableContentTypes.length > 1) {
            new import_obsidian7.Notice(`\u26A0\uFE0F Folder conflict detected! Multiple content types (${applicableContentTypes.join(", ")}) would process this file. Please specify different folders in settings.`);
            return;
          }
          for (const customType of this.settings.customContentTypes) {
            if (customType.enabled) {
              if (customType.folder && (filePath.startsWith(customType.folder + "/") || filePath === customType.folder)) {
                customTypeId = customType.id;
                shouldProcess = true;
                break;
              } else if (!customType.folder) {
                customTypeId = customType.id;
                shouldProcess = true;
                break;
              }
            }
          }
          if (!customTypeId) {
            if (pagesFolder && (filePath.startsWith(pagesFolder + "/") || filePath === pagesFolder)) {
              isPage = true;
              shouldProcess = true;
            } else if (!pagesFolder && this.settings.enablePages && isInVaultRoot) {
              isPage = true;
              shouldProcess = true;
            }
          }
          if (!shouldProcess && this.settings.automatePostCreation) {
            if (postsFolder) {
              if (this.settings.onlyAutomateInPostsFolder) {
                const pathDepth = filePath.split("/").length;
                const postsDepth = postsFolder.split("/").length;
                if (filePath.startsWith(postsFolder + "/") || filePath === postsFolder) {
                  if (pathDepth <= postsDepth + 1) {
                    shouldProcess = true;
                  }
                }
              } else {
                if (filePath.startsWith(postsFolder + "/") || filePath === postsFolder) {
                  shouldProcess = true;
                }
              }
            } else {
              shouldProcess = true;
            }
          }
          if (!shouldProcess) {
            return;
          }
          const stat = await this.app.vault.adapter.stat(file.path);
          const isNewNote = (stat == null ? void 0 : stat.mtime) && now - stat.mtime < CONSTANTS.STAT_MTIME_THRESHOLD;
          if (!isNewNote) {
            return;
          }
          const cache = this.app.metadataCache.getFileCache(file);
          if (cache == null ? void 0 : cache.frontmatter) {
            const frontmatterKeys = Object.keys(cache.frontmatter);
            if (frontmatterKeys.length > 1 || !frontmatterKeys.includes("title")) {
              return;
            }
          }
          if (customTypeId) {
            new TitleModal(this.app, file, this, customTypeId).open();
          } else if (isPage) {
            new TitleModal(this.app, file, this, "page").open();
          } else {
            new TitleModal(this.app, file, this, "post").open();
          }
        }
      };
      this.registerEvent(this.app.vault.on("create", this.createEvent));
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  registerContextMenu() {
    this.registerEvent(
      this.app.workspace.on("editor-menu", (menu, editor, view) => {
        if (!this.settings.enableCopyHeadingLink) {
          return;
        }
        const cursor = editor.getCursor();
        const file = view.file;
        if (!(file instanceof import_obsidian7.TFile)) {
          return;
        }
        const heading = this.headingLinkGenerator.findHeadingAtLine(this.app, file, cursor.line);
        if (heading) {
          menu.addItem((item) => {
            item.setTitle("Copy Heading Link").setIcon("link-2").onClick(async () => {
              const link = this.headingLinkGenerator.generateLink(this.app, file, heading);
              await navigator.clipboard.writeText(link);
              new import_obsidian7.Notice("Heading link copied to clipboard");
            });
          });
        }
      })
    );
  }
};
//# sourceMappingURL=data:application/json;base64,
